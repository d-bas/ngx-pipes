var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/pipes/ArrayJoinPipe.html",[0,0.121,1,1.964]],["body/pipes/ArrayJoinPipe.html",[0,0.15,1,2.434,2,0.424,3,0.166,4,0.166,5,0.111,6,3.004,7,3.004,8,2.401,9,0.717,10,4.071,11,1.003,12,2.044,13,0.873,14,5.178,15,5.178,16,3.955,17,4.071,18,4.071,19,3.427,20,4.071,21,5.178,22,4.071,23,5.178,24,4.071,25,3.427,26,4.071,27,0.837,28,0.028,29,5.178,30,5.693,31,0.502,32,0.77,33,0.502,34,0.387,35,0.907,36,5.992,37,0.502,38,2.852,39,0.502,40,0.318,41,0.387,42,0.717,43,5.178,44,0.913,45,1.62,46,0.223,47,0.717,48,0.223,49,0.166,50,0.254,51,0.502,52,0.717,53,1.055,54,0.502,55,2.852,56,2.852,57,0.012,58,0.017,59,0.012]],["title/modules/ArrayTransformPipesModule.html",[60,0.979,61,1.964]],["body/modules/ArrayTransformPipesModule.html",[1,4.001,3,0.235,4,0.235,5,0.158,6,2.992,7,2.992,16,2.676,28,0.028,34,0.551,46,0.405,48,0.318,49,0.235,50,0.361,57,0.017,58,0.021,59,0.017,60,1.209,61,3.839,62,1.613,63,1.739,64,2.036,65,2.853,66,2.036,67,2.036,68,2.853,69,3.414,70,3.414,71,3.414,72,2.593,73,2.036,74,1.739,75,2.215,76,2.593,77,4.054]],["title/pipes/BytesToMegabytesPipe.html",[0,0.121,78,1.964]],["body/pipes/BytesToMegabytesPipe.html",[0,0.159,2,0.462,3,0.18,4,0.18,5,0.121,9,0.762,11,0.762,13,0.587,27,0.877,28,0.028,31,0.548,32,0.807,33,0.548,34,0.422,37,0.548,39,0.548,40,0.347,41,0.422,42,1.031,44,0.995,45,1.721,46,0.243,47,0.762,48,0.243,49,0.18,50,0.277,51,0.548,52,0.762,53,1.149,54,0.548,57,0.02,58,0.018,59,0.013,78,2.586,79,2.616,80,3.191,81,5.378,82,5.378,83,4.325,84,5.378,85,5.854,86,5.654,87,3.191,88,4.325,89,2.165,90,5.854,91,3.107,92,5.378,93,3.641,94,3.641,95,2.363,96,3.284,97,3.641,98,1.333,99,3.107,100,1.698,101,3.107]],["title/modules/DatetimePipesModule.html",[60,0.979,102,1.964]],["body/modules/DatetimePipesModule.html",[3,0.22,4,0.22,5,0.148,28,0.028,46,0.432,48,0.298,49,0.22,50,0.338,57,0.016,58,0.02,59,0.016,60,1.132,62,1.512,63,1.629,64,1.907,65,2.766,66,1.907,67,1.907,68,2.766,72,2.486,73,1.907,74,1.629,75,2.075,76,2.486,102,3.911,103,3.198,104,3.198,105,3.198,106,3.964,107,3.964,108,3.799,109,3.799,110,3.799,111,3.799]],["title/pipes/DefaultValuePipe.html",[0,0.121,112,1.964]],["body/pipes/DefaultValuePipe.html",[0,0.15,2,0.423,3,0.165,4,0.165,5,0.111,9,0.716,11,0.716,13,0.552,27,0.835,28,0.028,31,0.501,32,0.769,33,0.501,34,0.386,35,0.905,37,0.501,39,0.501,40,0.317,41,0.386,42,1.151,44,0.911,45,2.461,46,0.318,47,0.716,48,0.223,49,0.165,50,0.253,51,0.501,52,0.835,53,1.503,54,0.501,57,0.012,58,0.017,59,0.012,93,3.421,112,2.43,113,3.421,114,2.395,115,4.023,116,2.596,117,3.421,118,4.064,119,2.998,120,2.425,121,2.682,122,2.058,123,6.258,124,5.172,125,2.825,126,2.845,127,4.064,128,2.682,129,1.617,130,1.878,131,2.099,132,2.099]],["title/interfaces/ElapsedTimeOptions.html",[133,1.649,134,2.168]],["body/interfaces/ElapsedTimeOptions.html",[3,0.198,4,0.198,5,0.133,13,0.462,28,0.028,40,0.513,41,0.625,46,0.361,49,0.303,57,0.021,58,0.019,59,0.014,89,1.258,98,2.504,100,1.859,120,1.832,129,1.354,133,1.709,134,3.689,135,2.246,136,2.511,137,2.511,138,2.035,139,3.396,140,4.916,141,1.929,142,4.603,143,3.876,144,4.131,145,2.865,146,3.849,147,2.511,148,2.246,149,2.865,150,4.392,151,3.876,152,2.246,153,3.403,154,3.403,155,3.403,156,3.403,157,3.403,158,3.403,159,3.403,160,3.403,161,3.403,162,3.403,163,3.403,164,3.403]],["title/pipes/ElapsedTimePipe.html",[0,0.121,106,1.964]],["body/pipes/ElapsedTimePipe.html",[0,0.151,2,0.428,3,0.167,4,0.167,5,0.112,9,0.722,11,0.916,13,0.706,27,0.916,28,0.028,31,0.508,32,0.774,33,0.508,34,0.391,37,0.508,39,0.508,40,0.321,41,0.391,44,0.922,45,1.632,46,0.321,47,0.722,48,0.226,49,0.167,50,0.256,51,0.508,52,0.841,54,0.508,57,0.012,58,0.017,59,0.012,106,2.452,120,2.339,134,3.433,140,3.452,146,4.337,149,4.019,150,4.379,151,4.628,165,3.452,166,2.425,167,4.1,168,5.878,169,3.452,170,4.1,171,4.1,172,3.433,173,5.201,174,5.712,175,5.712,176,1.759,177,4.1,178,2.88,179,3.452,180,4.1,181,2.88,182,2.88]],["title/interfaces/IsEmptyOptions.html",[125,1.794,133,1.649]],["body/interfaces/IsEmptyOptions.html",[3,0.233,4,0.233,5,0.156,13,0.697,28,0.028,40,0.447,41,0.697,42,0.996,49,0.298,53,1.484,54,0.996,57,0.016,58,0.021,59,0.016,98,1.721,115,3.386,116,2.014,120,1.596,121,3.386,125,3.089,128,3.934,129,1.596,130,2.648,133,2.014,135,2.648,138,2.399,139,3.785,141,2.091,148,2.648,176,2.2,183,3.378,184,3.378,185,5.13,186,2.399,187,4.012,188,3.378]],["title/pipes/IsEmptyPipe.html",[0,0.121,189,1.964]],["body/pipes/IsEmptyPipe.html",[0,0.165,2,0.484,3,0.189,4,0.189,5,0.127,9,0.787,11,0.967,13,0.607,27,0.787,28,0.028,31,0.574,32,0.827,33,0.574,34,0.442,35,0.995,37,0.574,39,0.574,40,0.363,41,0.442,42,0.967,44,1.043,45,1.778,46,0.35,47,0.787,48,0.255,49,0.189,50,0.29,51,0.574,52,0.787,53,1.652,54,0.574,57,0.021,58,0.018,59,0.013,115,4.015,116,2.243,119,3.297,120,2.501,121,2.95,122,2.364,125,2.998,128,2.95,129,1.778,130,3.367,131,2.404,132,2.404,141,1.652,176,1.917,189,2.672,190,2.243,191,2.404,192,2.441,193,2.743,194,2.441]],["title/pipes/IsNotEmptyPipe.html",[0,0.121,195,1.964]],["body/pipes/IsNotEmptyPipe.html",[0,0.165,2,0.484,3,0.189,4,0.189,5,0.127,9,0.787,11,0.967,13,0.607,27,0.787,28,0.028,31,0.574,32,0.827,33,0.574,34,0.442,35,0.995,37,0.574,39,0.574,40,0.363,41,0.442,42,0.967,44,1.043,45,1.778,46,0.35,47,0.787,48,0.255,49,0.189,50,0.29,51,0.574,52,0.787,53,1.652,54,0.574,57,0.021,58,0.018,59,0.013,115,4.015,116,2.243,119,3.297,120,2.501,121,2.95,122,2.364,125,2.998,128,2.95,129,2.184,130,2.15,131,2.404,132,2.404,141,1.652,190,2.243,191,2.404,192,2.441,193,2.743,194,2.441,195,2.672,196,4.468]],["title/pipes/IsNotNullPipe.html",[0,0.121,197,1.964]],["body/pipes/IsNotNullPipe.html",[0,0.18,2,0.554,3,0.216,4,0.216,5,0.145,9,0.861,11,1.021,27,0.861,28,0.028,31,0.656,32,0.885,33,0.656,34,0.506,35,1.089,37,0.656,39,0.656,40,0.415,41,0.506,42,1.06,46,0.292,47,0.861,48,0.292,49,0.216,50,0.332,51,0.656,52,0.656,54,0.656,57,0.022,58,0.02,59,0.015,116,3.16,122,2.306,129,1.945,141,1.808,190,2.454,192,2.671,194,2.671,197,2.923,198,2.748,199,4.888,200,3.136]],["title/pipes/IsNotUndefinedPipe.html",[0,0.121,201,1.964]],["body/pipes/IsNotUndefinedPipe.html",[0,0.18,2,0.552,3,0.215,4,0.215,5,0.145,9,0.86,11,1.02,27,0.86,28,0.028,31,0.654,32,0.883,33,0.654,34,0.504,35,1.086,37,0.654,39,0.654,40,0.414,41,0.504,42,1.059,46,0.291,47,0.86,48,0.291,49,0.215,50,0.33,51,0.654,52,0.654,53,2.325,54,0.654,57,0.022,58,0.02,59,0.015,122,2.303,129,1.941,141,1.804,190,2.449,192,2.665,194,2.665,201,2.917,202,2.739,203,4.878,204,3.126]],["title/pipes/IsNullPipe.html",[0,0.121,205,1.964]],["body/pipes/IsNullPipe.html",[0,0.18,2,0.552,3,0.215,4,0.215,5,0.145,9,0.86,11,1.02,27,0.86,28,0.028,31,0.654,32,0.883,33,0.654,34,0.504,35,1.086,37,0.654,39,0.654,40,0.414,41,0.504,42,1.059,46,0.291,47,0.86,48,0.291,49,0.215,50,0.33,51,0.654,52,0.654,54,0.654,57,0.022,58,0.02,59,0.015,116,3.157,122,2.303,141,1.804,176,2.092,190,2.449,192,2.665,194,2.665,198,2.739,200,3.126,205,2.917,206,4.878]],["title/pipes/IsUndefinedPipe.html",[0,0.121,207,1.964]],["body/pipes/IsUndefinedPipe.html",[0,0.18,2,0.552,3,0.215,4,0.215,5,0.145,9,0.86,11,1.02,27,0.86,28,0.028,31,0.654,32,0.883,33,0.654,34,0.504,35,1.086,37,0.654,39,0.654,40,0.414,41,0.504,42,1.059,46,0.291,47,0.86,48,0.291,49,0.215,50,0.33,51,0.654,52,0.654,53,2.325,54,0.654,57,0.022,58,0.02,59,0.015,122,2.303,141,1.804,176,2.092,190,2.449,192,2.665,194,2.665,202,2.739,204,3.126,207,2.917,208,4.878]],["title/modules/PipesModule.html",[60,0.979,209,2.423]],["body/modules/PipesModule.html",[3,0.233,4,0.233,5,0.156,13,0.697,16,2.648,28,0.028,34,0.697,46,0.502,48,0.314,49,0.233,50,0.357,57,0.016,58,0.021,59,0.016,61,3.068,62,1.596,76,2.575,102,3.068,122,1.596,148,2.648,209,3.785,210,4.012,211,6.3,212,4.012,213,3.068,214,3.068,215,3.068,216,4.012,217,3.068,218,4.012,219,4.012]],["title/interfaces/ProgressOptions.html",[133,1.649,220,2.168]],["body/interfaces/ProgressOptions.html",[3,0.17,4,0.17,5,0.114,13,0.398,28,0.028,40,0.538,41,0.78,42,0.849,45,1.652,49,0.241,54,0.517,57,0.026,58,0.017,59,0.012,87,4.24,89,2.328,94,4.838,95,3.139,96,3.984,98,2.068,100,3.228,120,1.652,133,1.472,135,1.935,138,1.753,139,3.064,148,1.935,152,1.935,220,3.461,221,2.469,222,4.659,223,4.659,224,4.659,225,4.152,226,3.064,227,4.152,228,4.152,229,4.152,230,5.243,231,4.152,232,4.152,233,4.152,234,4.152,235,4.152,236,2.469,237,4.059,238,2.469,239,2.932]],["title/pipes/ProgressPipe.html",[0,0.121,240,1.964]],["body/pipes/ProgressPipe.html",[0,0.139,2,0.381,3,0.149,4,0.149,5,0.1,9,0.664,11,0.452,13,0.512,27,0.925,28,0.028,31,0.452,32,0.725,33,0.452,34,0.348,35,0.839,37,0.452,39,0.452,40,0.286,41,0.348,42,1.026,44,0.821,45,1.5,46,0.295,47,0.664,48,0.201,49,0.149,50,0.228,51,0.452,52,0.787,54,0.452,57,0.011,58,0.015,59,0.011,87,4.05,89,2.03,96,2.488,100,3.385,120,2.258,169,4.148,220,3.252,222,4.148,223,4.148,224,4.148,236,5.268,237,5.001,240,2.254,241,2.159,242,3.769,243,5.489,244,4.927,245,5.821,246,2.564,247,3.769,248,2.781,249,2.564,250,2.564]],["title/pipes/SafeHtmlPipe.html",[0,0.121,251,1.964]],["body/pipes/SafeHtmlPipe.html",[0,0.17,2,0.506,3,0.198,4,0.198,5,0.133,9,0.811,11,0.811,13,0.708,27,0.919,28,0.028,31,0.6,32,0.846,33,0.6,34,0.462,37,0.6,39,0.6,40,0.38,41,0.462,46,0.361,47,0.811,48,0.267,49,0.198,50,0.303,51,0.6,52,0.6,54,0.6,57,0.014,58,0.019,59,0.014,74,1.974,251,2.753,252,3.876,253,2.865,254,4.603,255,4.603,256,4.705,257,4.603,258,4.603,259,6.018,260,6.153,261,4.603,262,3.403,263,4.44,264,3.876,265,3.876,266,4.603,267,2.865,268,2.511,269,2.865,270,2.865,271,3.403]],["title/modules/StringCheckPipesModule.html",[60,0.979,213,1.964]],["body/modules/StringCheckPipesModule.html",[3,0.201,4,0.201,5,0.135,13,0.715,28,0.028,46,0.441,48,0.271,49,0.201,50,0.308,57,0.014,58,0.019,59,0.014,60,1.033,62,1.379,63,1.486,64,1.74,65,2.643,66,1.74,67,1.74,68,2.643,72,2.339,73,1.74,74,1.486,75,1.893,76,2.339,122,1.379,213,3.934,272,2.917,273,2.917,274,2.917,275,3.909,276,3.909,277,3.909,278,1.281,279,3.148,280,2.557,281,4.659,282,2.557,283,3.465]],["title/pipes/StringEndsWithPipe.html",[0,0.121,275,1.964]],["body/pipes/StringEndsWithPipe.html",[0,0.153,2,0.435,3,0.17,4,0.17,5,0.114,9,0.73,11,0.923,13,0.891,27,0.923,28,0.028,31,0.515,32,0.781,33,0.515,34,0.397,35,0.923,37,0.515,39,0.515,40,0.326,41,0.654,42,0.848,44,1.89,46,0.229,47,0.73,48,0.229,49,0.17,50,0.26,51,0.515,52,0.848,53,1.082,54,0.515,57,0.012,58,0.017,59,0.012,89,1.78,95,1.598,100,1.598,129,1.916,141,1.533,176,1.778,179,2.462,186,1.749,275,2.478,278,1.533,279,2.478,280,4.236,284,2.158,285,3.058,286,2.736,287,4.527,288,4.145,289,4.45,290,2.925,291,3.058,292,3.864,293,4.145,294,3.058,295,2.462,296,2.925]],["title/pipes/StringFormatUnicornPipe.html",[0,0.121,297,1.964]],["body/pipes/StringFormatUnicornPipe.html",[0,0.138,2,0.378,3,0.147,4,0.147,5,0.099,9,0.66,11,0.66,12,2.747,13,0.743,16,2.472,27,0.864,28,0.028,31,0.448,32,0.917,33,0.448,34,0.345,35,0.834,37,0.448,39,0.448,40,0.283,41,0.345,42,1.062,46,0.199,47,0.66,48,0.199,49,0.147,50,0.226,51,0.448,52,0.783,54,0.66,57,0.02,58,0.015,59,0.01,96,3.238,98,1.606,100,2.68,172,3.238,188,2.14,278,1.385,297,2.239,298,1.88,299,2.14,300,3.744,301,4.888,302,3.744,303,3.744,304,3.611,305,4.037,306,4.906,307,5.806,308,5.471,309,4.037,310,4.037,311,4.906,312,2.541,313,3.744,314,3.744,315,3.744,316,3.744,317,3.744,318,3.744,319,2.541,320,3.744,321,2.541,322,3.744,323,2.541,324,2.541,325,2.541,326,2.541,327,2.541]],["title/pipes/StringIncludesPipe.html",[0,0.121,276,1.964]],["body/pipes/StringIncludesPipe.html",[0,0.16,2,0.463,3,0.181,4,0.181,5,0.122,9,0.764,11,0.949,13,0.89,27,0.878,28,0.028,31,0.549,32,0.808,33,0.549,34,0.423,35,0.965,37,0.549,39,0.549,40,0.347,41,0.676,42,0.878,44,1.812,46,0.244,47,0.764,48,0.244,49,0.181,50,0.277,51,0.549,52,0.878,53,1.152,54,0.549,57,0.013,58,0.018,59,0.013,89,1.842,95,1.702,129,1.982,141,1.602,176,1.858,186,1.863,276,2.591,278,1.602,279,2.591,285,3.197,287,3.973,289,4.522,291,3.197,292,3.973,294,3.197,295,2.623,328,2.623,329,4.333,330,5.385,331,5.385,332,4.333,333,3.116]],["title/pipes/StringNl2brPipe.html",[0,0.121,334,1.964]],["body/pipes/StringNl2brPipe.html",[0,0.151,2,0.427,3,0.167,4,0.167,5,0.112,9,0.721,11,0.721,13,0.815,27,0.721,28,0.028,31,0.506,32,0.773,33,0.506,34,0.39,35,0.911,37,0.506,39,0.506,40,0.32,41,0.39,42,1.077,44,0.92,45,1.629,46,0.321,47,0.721,48,0.225,49,0.167,50,0.256,51,0.506,52,0.721,53,1.062,54,0.721,57,0.023,58,0.017,59,0.012,98,1.232,176,2.045,186,1.718,256,3.446,263,3.02,265,4.374,267,2.419,268,2.12,269,2.419,270,2.419,278,1.513,298,2.055,301,4.374,304,2.702,334,2.447,335,2.419,336,4.093,337,4.093,338,4.093,339,4.093,340,4.093,341,5.195,342,5.195,343,4.093,344,3.833,345,5.195,346,5.873,347,2.873,348,4.093,349,4.093,350,2.873,351,4.767,352,2.873,353,2.873]],["title/pipes/StringStartsWithPipe.html",[0,0.121,277,1.964]],["body/pipes/StringStartsWithPipe.html",[0,0.158,2,0.458,3,0.179,4,0.179,5,0.12,9,0.758,11,0.944,13,0.897,27,0.758,28,0.028,31,0.543,32,0.803,33,0.543,34,0.419,35,0.958,37,0.543,39,0.543,40,0.344,41,0.673,42,0.873,44,1.919,46,0.241,47,0.758,48,0.241,49,0.179,50,0.274,51,0.543,52,0.873,54,0.543,57,0.013,58,0.018,59,0.013,89,1.832,98,1.322,116,1.547,129,1.971,141,1.59,176,1.844,186,1.843,277,2.572,278,1.59,279,2.572,282,4.308,284,2.274,285,3.173,286,2.839,287,4.51,289,4.421,291,3.173,292,3.954,294,2.274,354,4.3,355,3.082,356,3.082]],["title/modules/StringTransformPipesModule.html",[60,0.979,214,1.964]],["body/modules/StringTransformPipesModule.html",[3,0.177,4,0.177,5,0.119,13,0.762,28,0.028,34,0.413,46,0.455,48,0.238,49,0.177,50,0.271,57,0.012,58,0.017,59,0.012,60,0.907,62,1.21,63,1.304,64,1.527,65,2.469,66,1.527,67,1.527,68,2.469,72,2.139,73,1.527,74,1.304,75,1.661,76,2.139,172,2.007,214,3.972,278,1.125,297,3.826,298,2.816,334,3.826,357,2.561,358,2.561,359,2.561,360,3.826,361,3.826,362,3.826,363,3.041,364,2.007,365,3.041,366,3.041,367,3.041,368,3.041]],["title/pipes/StringTruncateByWordsPipe.html",[0,0.121,360,1.964]],["body/pipes/StringTruncateByWordsPipe.html",[0,0.137,2,0.374,3,0.146,4,0.146,5,0.098,9,0.654,11,0.654,12,2.736,13,0.854,19,3.127,25,3.127,27,0.86,28,0.028,31,0.443,32,0.716,33,0.443,34,0.341,35,0.827,37,0.443,39,0.443,40,0.493,41,0.341,42,0.96,44,0.805,46,0.197,47,0.654,48,0.197,49,0.146,50,0.224,51,0.443,52,0.654,57,0.01,58,0.015,59,0.01,89,0.929,95,2.029,98,1.078,120,2.243,152,1.659,226,3.6,248,2.74,278,1.373,286,2.452,298,1.865,304,3.597,305,4.021,309,4.021,310,4.021,344,4.021,360,2.221,364,3.221,369,2.116,370,3.127,371,3.127,372,3.127,373,3.714,374,3.714,375,3.127,376,3.714,377,4.108,378,3.127,379,4.588,380,3.127,381,5.787,382,4.588,383,3.127,384,2.513,385,2.116,386,2.116]],["title/pipes/StringTruncatePipe.html",[0,0.121,361,1.964]],["body/pipes/StringTruncatePipe.html",[0,0.139,2,0.382,3,0.149,4,0.149,5,0.1,9,0.665,11,0.665,12,2.758,13,0.857,27,0.869,28,0.028,31,0.453,32,0.726,33,0.453,34,0.349,35,0.841,37,0.453,39,0.453,40,0.499,41,0.349,42,0.968,44,0.823,46,0.201,47,0.665,48,0.201,49,0.149,50,0.229,51,0.453,52,0.665,57,0.011,58,0.015,59,0.011,89,0.95,95,2.062,98,1.102,120,2.259,152,1.696,226,3.639,248,2.786,278,1.396,286,2.492,298,1.895,304,3.626,305,4.053,309,4.053,310,4.053,344,4.053,361,2.258,364,2.492,370,3.179,371,3.179,372,3.179,375,3.179,377,4.152,378,3.179,379,4.625,380,3.179,382,4.625,383,3.179,385,2.164,386,2.164,387,2.164,388,3.179,389,5.824,390,2.57]],["title/pipes/StringUnescapePipe.html",[0,0.121,362,1.964]],["body/pipes/StringUnescapePipe.html",[0,0.176,2,0.533,3,0.208,4,0.208,5,0.14,9,0.84,11,0.84,12,1.8,13,0.807,27,0.84,28,0.028,31,0.632,32,0.868,33,0.632,34,0.487,35,1.061,37,0.632,39,0.632,40,0.4,41,0.487,42,1.076,46,0.281,47,0.84,48,0.281,49,0.208,50,0.319,51,0.632,52,0.632,54,0.632,57,0.015,58,0.02,59,0.015,80,4.211,97,4.013,263,3.517,278,1.763,298,2.393,362,2.85,388,4.013,391,3.018,392,4.766,393,4.766,394,4.766,395,4.766,396,5.707,397,3.584,398,3.584,399,3.584]],["title/pipes/TimestampPipe.html",[0,0.121,107,1.964]],["body/pipes/TimestampPipe.html",[0,0.165,2,0.487,3,0.19,4,0.19,5,0.128,9,0.79,11,0.969,13,0.782,27,0.79,28,0.028,31,0.577,32,0.829,33,0.577,34,0.445,35,0.999,37,0.577,39,0.577,40,0.365,41,0.445,42,0.969,46,0.401,47,0.79,48,0.257,49,0.19,50,0.292,51,0.577,52,0.577,54,0.577,57,0.013,58,0.018,59,0.013,80,4.059,89,1.659,107,2.683,143,3.777,144,4.154,145,2.759,147,4.742,400,2.759,401,6.203,402,4.486,403,4.486,404,3.276,405,4.486,406,3.276,407,3.276,408,3.276]],["title/modules/UnitsPipesModule.html",[60,0.979,215,1.964]],["body/modules/UnitsPipesModule.html",[3,0.238,4,0.238,5,0.16,28,0.028,46,0.407,48,0.321,49,0.238,50,0.365,57,0.017,58,0.021,59,0.017,60,1.222,62,1.631,63,1.758,64,2.057,65,2.867,66,2.057,67,2.057,68,2.867,72,2.61,73,2.057,74,1.758,75,2.239,76,2.61,78,4.007,215,3.848,409,3.45,410,3.45,411,3.45,412,4.098,413,4.098]],["title/modules/UtilsPipesModule.html",[60,0.979,217,1.964]],["body/modules/UtilsPipesModule.html",[3,0.146,4,0.146,5,0.098,28,0.028,46,0.471,48,0.197,49,0.146,50,0.224,57,0.01,58,0.015,59,0.01,60,0.749,62,1,63,1.078,64,1.262,65,2.218,66,1.262,67,1.262,68,2.218,72,1.865,73,1.262,74,1.078,75,1.373,76,1.865,112,3.69,189,3.69,195,3.69,197,3.69,201,3.69,205,3.69,207,3.69,217,4.015,240,3.69,251,3.69,414,2.116,415,2.116,416,2.116,417,2.513,418,2.513,419,2.513,420,5.449,421,3.714,422,2.513,423,2.513,424,2.513,425,3.714,426,3.714]],["title/coverage.html",[427,3.783]],["body/coverage.html",[0,0.245,1,1.705,5,0.111,6,2.104,7,2.104,8,2.401,12,1.432,28,0.028,40,0.318,57,0.012,58,0.017,59,0.012,78,1.705,79,2.401,106,1.705,107,1.705,112,1.705,113,2.401,114,2.401,125,1.558,133,2.383,134,1.882,136,2.104,137,2.104,165,2.401,166,2.401,172,1.882,183,2.401,184,2.401,189,1.705,190,2.858,191,3.004,195,1.705,197,1.705,198,3.004,201,1.705,202,3.004,205,1.705,207,1.705,220,1.882,221,2.401,238,5.589,240,1.705,241,2.401,251,1.705,252,2.401,253,2.401,275,1.705,276,1.705,277,1.705,278,2.216,279,2.839,280,2.104,282,2.104,284,3.004,297,1.705,298,2.749,299,2.401,328,2.401,334,1.705,335,2.401,360,1.705,361,1.705,362,1.705,364,1.882,369,2.401,387,2.401,391,2.401,400,2.401,427,2.401,428,2.852,429,2.852,430,2.852,431,4.071,432,4.071,433,2.852,434,2.852,435,6.639,436,2.852,437,2.852]],["title/dependencies.html",[63,1.696,438,2.738]],["body/dependencies.html",[28,0.027,48,0.384,57,0.02,58,0.024,59,0.02,63,2.49,144,3.833,439,4.907,440,4.907,441,5.807,442,4.907,443,4.907,444,4.889]],["title/index.html",[138,1.637,445,2.738,446,2.738]],["body/index.html",[2,0.932,5,0.143,12,1.84,28,0.02,32,0.594,45,1.458,57,0.015,58,0.02,59,0.015,74,1.572,117,4.072,122,1.458,264,3.086,444,3.086,447,3.665,448,4.837,449,3.665,450,5.414,451,5.414,452,3.665,453,3.665,454,5.757,455,6.147,456,5.414,457,5.414,458,5.985,459,6.147,460,3.665,461,3.665,462,3.665,463,3.665,464,3.665,465,3.665,466,3.665,467,5.985,468,3.665,469,3.665,470,4.837,471,3.665,472,3.665,473,3.665,474,4.837,475,3.665,476,3.665,477,3.665,478,3.665,479,3.665,480,3.665,481,4.837,482,4.837,483,3.665,484,3.665,485,3.665,486,3.665,487,3.665,488,5.414,489,3.665,490,3.665]],["title/modules.html",[62,1.788]],["body/modules.html",[28,0.023,57,0.019,58,0.023,59,0.019,61,2.735,62,1.82,102,2.735,209,3.374,213,2.735,214,2.735,215,2.735,217,2.735,268,4.802,491,6.509,492,6.509,493,6.588,494,4.573,495,4.573]],["title/overview.html",[496,3.783]],["body/overview.html",[1,3.235,2,0.33,28,0.028,57,0.009,58,0.014,59,0.009,60,0.662,61,2.952,62,0.884,63,0.952,64,1.115,65,1.115,66,1.115,67,1.115,68,1.115,69,1.87,70,1.87,71,1.87,72,1.699,73,1.115,74,0.952,78,3.235,102,3.334,103,1.87,104,1.87,105,1.87,106,3.235,107,3.235,112,3.235,135,1.466,189,3.235,195,3.235,197,3.235,201,3.235,205,3.235,207,3.235,213,3.543,214,3.765,215,2.952,217,3.952,240,3.235,251,3.235,272,1.87,273,1.87,274,1.87,275,3.235,276,3.235,277,3.235,297,3.235,334,3.235,357,1.87,358,1.87,359,1.87,360,3.235,361,3.235,362,3.235,409,1.87,410,1.87,411,1.87,414,1.87,415,1.87,416,1.87,496,1.87,497,2.221,498,2.221,499,2.221]],["title/miscellaneous/typealiases.html",[500,2.305,501,3.953]],["body/miscellaneous/typealiases.html",[13,0.669,28,0.027,40,0.55,57,0.02,58,0.024,59,0.02,89,1.822,136,3.636,137,4.295,138,2.947,144,3.253,146,4.295,147,3.636,500,4.149,502,4.928,503,4.928]]],"invertedIndex":[["",{"_index":28,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"pipes/BytesToMegabytesPipe.html":{},"modules/DatetimePipesModule.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"modules/PipesModule.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":100,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{}}}],["0.0",{"_index":235,"title":{},"body":{"interfaces/ProgressOptions.html":{}}}],["0.00",{"_index":234,"title":{},"body":{"interfaces/ProgressOptions.html":{}}}],["0.1",{"_index":232,"title":{},"body":{"interfaces/ProgressOptions.html":{}}}],["0.12",{"_index":231,"title":{},"body":{"interfaces/ProgressOptions.html":{}}}],["039;e=mc&sup2;&#039",{"_index":395,"title":{},"body":{"pipes/StringUnescapePipe.html":{}}}],["1",{"_index":96,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/StringFormatUnicornPipe.html":{}}}],["1,2,3,4",{"_index":29,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["1.10.0",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":435,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":432,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":226,"title":{},"body":{"interfaces/ProgressOptions.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["10.1",{"_index":227,"title":{},"body":{"interfaces/ProgressOptions.html":{}}}],["10.12",{"_index":228,"title":{},"body":{"interfaces/ProgressOptions.html":{}}}],["100",{"_index":238,"title":{},"body":{"interfaces/ProgressOptions.html":{},"coverage.html":{}}}],["1000",{"_index":245,"title":{},"body":{"pipes/ProgressPipe.html":{}}}],["1000000",{"_index":99,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{}}}],["123",{"_index":259,"title":{},"body":{"pipes/SafeHtmlPipe.html":{}}}],["1234567890",{"_index":84,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{}}}],["2",{"_index":87,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{}}}],["2.27.0",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["21",{"_index":498,"title":{},"body":{"overview.html":{}}}],["3",{"_index":499,"title":{},"body":{"overview.html":{}}}],["3/4",{"_index":434,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":385,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["50",{"_index":431,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":244,"title":{},"body":{"pipes/ProgressPipe.html":{}}}],["7",{"_index":497,"title":{},"body":{"overview.html":{}}}],["75",{"_index":433,"title":{},"body":{"coverage.html":{}}}],["9.1.12",{"_index":444,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["abc",{"_index":124,"title":{},"body":{"pipes/DefaultValuePipe.html":{}}}],["add",{"_index":464,"title":{},"body":{"index.html":{}}}],["added",{"_index":465,"title":{},"body":{"index.html":{}}}],["albert",{"_index":393,"title":{},"body":{"pipes/StringUnescapePipe.html":{}}}],["aliases",{"_index":502,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amount",{"_index":81,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{}}}],["angular",{"_index":450,"title":{},"body":{"index.html":{}}}],["angular.json",{"_index":466,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":48,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"pipes/BytesToMegabytesPipe.html":{},"modules/DatetimePipesModule.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"modules/PipesModule.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":267,"title":{},"body":{"pipes/SafeHtmlPipe.html":{},"pipes/StringNl2brPipe.html":{}}}],["args",{"_index":311,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["args.length",{"_index":319,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["args[0",{"_index":322,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["array",{"_index":16,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"modules/PipesModule.html":{},"pipes/StringFormatUnicornPipe.html":{}}}],["array.isarray(value",{"_index":55,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["array.prototype.slice.call(args",{"_index":323,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["arrayjoin",{"_index":30,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["arrayjoinpipe",{"_index":1,"title":{"pipes/ArrayJoinPipe.html":{}},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"coverage.html":{},"overview.html":{}}}],["arraytransformpipesmodule",{"_index":61,"title":{"modules/ArrayTransformPipesModule.html":{}},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/PipesModule.html":{},"modules.html":{},"overview.html":{}}}],["artifacts",{"_index":468,"title":{},"body":{"index.html":{}}}],["available",{"_index":495,"title":{},"body":{"modules.html":{}}}],["before",{"_index":339,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["between",{"_index":169,"title":{},"body":{"pipes/ElapsedTimePipe.html":{},"pipes/ProgressPipe.html":{}}}],["boolean",{"_index":141,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringStartsWithPipe.html":{}}}],["bootstrap",{"_index":66,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"overview.html":{}}}],["breaks",{"_index":338,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["browse",{"_index":493,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":268,"title":{},"body":{"pipes/SafeHtmlPipe.html":{},"pipes/StringNl2brPipe.html":{},"modules.html":{}}}],["build",{"_index":467,"title":{},"body":{"index.html":{}}}],["building",{"_index":473,"title":{},"body":{"index.html":{}}}],["bypass",{"_index":255,"title":{},"body":{"pipes/SafeHtmlPipe.html":{}}}],["bytes",{"_index":82,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{}}}],["bytestomegabytes",{"_index":85,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{}}}],["bytestomegabytespipe",{"_index":78,"title":{"pipes/BytesToMegabytesPipe.html":{}},"body":{"pipes/BytesToMegabytesPipe.html":{},"modules/UnitsPipesModule.html":{},"coverage.html":{},"overview.html":{}}}],["calculation",{"_index":242,"title":{},"body":{"pipes/ProgressPipe.html":{}}}],["cd",{"_index":476,"title":{},"body":{"index.html":{}}}],["characters",{"_index":388,"title":{},"body":{"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{}}}],["check",{"_index":122,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"modules/PipesModule.html":{},"modules/StringCheckPipesModule.html":{},"index.html":{}}}],["check/string",{"_index":279,"title":{},"body":{"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringStartsWithPipe.html":{},"coverage.html":{}}}],["checkemptystring",{"_index":128,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{}}}],["checking",{"_index":185,"title":{},"body":{"interfaces/IsEmptyOptions.html":{}}}],["checks",{"_index":285,"title":{},"body":{"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringStartsWithPipe.html":{}}}],["city",{"_index":310,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["class",{"_index":50,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"pipes/BytesToMegabytesPipe.html":{},"modules/DatetimePipesModule.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"modules/PipesModule.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{}}}],["cli",{"_index":451,"title":{},"body":{"index.html":{}}}],["cluster_arraytransformpipesmodule",{"_index":69,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{},"overview.html":{}}}],["cluster_arraytransformpipesmodule_declarations",{"_index":70,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{},"overview.html":{}}}],["cluster_arraytransformpipesmodule_exports",{"_index":71,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{},"overview.html":{}}}],["cluster_datetimepipesmodule",{"_index":103,"title":{},"body":{"modules/DatetimePipesModule.html":{},"overview.html":{}}}],["cluster_datetimepipesmodule_declarations",{"_index":104,"title":{},"body":{"modules/DatetimePipesModule.html":{},"overview.html":{}}}],["cluster_datetimepipesmodule_exports",{"_index":105,"title":{},"body":{"modules/DatetimePipesModule.html":{},"overview.html":{}}}],["cluster_stringcheckpipesmodule",{"_index":272,"title":{},"body":{"modules/StringCheckPipesModule.html":{},"overview.html":{}}}],["cluster_stringcheckpipesmodule_declarations",{"_index":273,"title":{},"body":{"modules/StringCheckPipesModule.html":{},"overview.html":{}}}],["cluster_stringcheckpipesmodule_exports",{"_index":274,"title":{},"body":{"modules/StringCheckPipesModule.html":{},"overview.html":{}}}],["cluster_stringtransformpipesmodule",{"_index":357,"title":{},"body":{"modules/StringTransformPipesModule.html":{},"overview.html":{}}}],["cluster_stringtransformpipesmodule_declarations",{"_index":358,"title":{},"body":{"modules/StringTransformPipesModule.html":{},"overview.html":{}}}],["cluster_stringtransformpipesmodule_exports",{"_index":359,"title":{},"body":{"modules/StringTransformPipesModule.html":{},"overview.html":{}}}],["cluster_unitspipesmodule",{"_index":409,"title":{},"body":{"modules/UnitsPipesModule.html":{},"overview.html":{}}}],["cluster_unitspipesmodule_declarations",{"_index":410,"title":{},"body":{"modules/UnitsPipesModule.html":{},"overview.html":{}}}],["cluster_unitspipesmodule_exports",{"_index":411,"title":{},"body":{"modules/UnitsPipesModule.html":{},"overview.html":{}}}],["cluster_utilspipesmodule",{"_index":414,"title":{},"body":{"modules/UtilsPipesModule.html":{},"overview.html":{}}}],["cluster_utilspipesmodule_declarations",{"_index":415,"title":{},"body":{"modules/UtilsPipesModule.html":{},"overview.html":{}}}],["cluster_utilspipesmodule_exports",{"_index":416,"title":{},"body":{"modules/UtilsPipesModule.html":{},"overview.html":{}}}],["code",{"_index":264,"title":{},"body":{"pipes/SafeHtmlPipe.html":{},"index.html":{}}}],["commas",{"_index":18,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["component",{"_index":457,"title":{},"body":{"index.html":{}}}],["concatenating",{"_index":14,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["concatenation",{"_index":43,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["const",{"_index":98,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"interfaces/IsEmptyOptions.html":{},"interfaces/ProgressOptions.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["constructor(private",{"_index":269,"title":{},"body":{"pipes/SafeHtmlPipe.html":{},"pipes/StringNl2brPipe.html":{}}}],["content",{"_index":258,"title":{},"body":{"pipes/SafeHtmlPipe.html":{}}}],["convert",{"_index":80,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["converted",{"_index":97,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{},"pipes/StringUnescapePipe.html":{}}}],["coverage",{"_index":427,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creates",{"_index":10,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["current",{"_index":247,"title":{},"body":{"pipes/ProgressPipe.html":{}}}],["cutting",{"_index":373,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{}}}],["dangerous",{"_index":342,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["date",{"_index":147,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"pipes/TimestampPipe.html":{},"miscellaneous/typealiases.html":{}}}],["datetime",{"_index":212,"title":{},"body":{"modules/PipesModule.html":{}}}],["datetime/elapsed",{"_index":109,"title":{},"body":{"modules/DatetimePipesModule.html":{}}}],["datetime/timestamp.pipe",{"_index":111,"title":{},"body":{"modules/DatetimePipesModule.html":{}}}],["datetimepipesmodule",{"_index":102,"title":{"modules/DatetimePipesModule.html":{}},"body":{"modules/DatetimePipesModule.html":{},"modules/PipesModule.html":{},"modules.html":{},"overview.html":{}}}],["decimal",{"_index":94,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{},"interfaces/ProgressOptions.html":{}}}],["decimalpartlength",{"_index":222,"title":{},"body":{"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{}}}],["declarations",{"_index":65,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"overview.html":{}}}],["default",{"_index":45,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/StringNl2brPipe.html":{},"index.html":{}}}],["defaults",{"_index":380,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["defaultvalue",{"_index":123,"title":{},"body":{"pipes/DefaultValuePipe.html":{}}}],["defaultvaluepipe",{"_index":112,"title":{"pipes/DefaultValuePipe.html":{}},"body":{"pipes/DefaultValuePipe.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"overview.html":{}}}],["defined",{"_index":37,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["dependencies",{"_index":63,"title":{"dependencies.html":{}},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":9,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["digits",{"_index":90,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{}}}],["dima",{"_index":308,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":460,"title":{},"body":{"index.html":{}}}],["directory",{"_index":471,"title":{},"body":{"index.html":{}}}],["dist",{"_index":470,"title":{},"body":{"index.html":{}}}],["dist/ngx",{"_index":477,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":428,"title":{},"body":{"coverage.html":{}}}],["domparser().parsefromstring(value",{"_index":398,"title":{},"body":{"pipes/StringUnescapePipe.html":{}}}],["domsanitizer",{"_index":256,"title":{},"body":{"pipes/SafeHtmlPipe.html":{},"pipes/StringNl2brPipe.html":{}}}],["don't",{"_index":462,"title":{},"body":{"index.html":{}}}],["dur",{"_index":159,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{}}}],["dur.asmilliseconds",{"_index":161,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{}}}],["e.g",{"_index":230,"title":{},"body":{"interfaces/ProgressOptions.html":{}}}],["e.q",{"_index":225,"title":{},"body":{"interfaces/ProgressOptions.html":{}}}],["einstein",{"_index":394,"title":{},"body":{"pipes/StringUnescapePipe.html":{}}}],["elapsed",{"_index":167,"title":{},"body":{"pipes/ElapsedTimePipe.html":{}}}],["elapsedtime",{"_index":149,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{}}}],["elapsedtime(start",{"_index":182,"title":{},"body":{"pipes/ElapsedTimePipe.html":{}}}],["elapsedtime:finishtime",{"_index":175,"title":{},"body":{"pipes/ElapsedTimePipe.html":{}}}],["elapsedtimeargument",{"_index":146,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"miscellaneous/typealiases.html":{}}}],["elapsedtimeoptions",{"_index":134,"title":{"interfaces/ElapsedTimeOptions.html":{}},"body":{"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"coverage.html":{}}}],["elapsedtimepipe",{"_index":106,"title":{"pipes/ElapsedTimePipe.html":{}},"body":{"modules/DatetimePipesModule.html":{},"pipes/ElapsedTimePipe.html":{},"coverage.html":{},"overview.html":{}}}],["elements",{"_index":15,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["empty",{"_index":115,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{}}}],["empty.pipe",{"_index":421,"title":{},"body":{"modules/UtilsPipesModule.html":{}}}],["empty.pipe.ts",{"_index":191,"title":{},"body":{"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"coverage.html":{}}}],["empty.pipe.ts:23",{"_index":193,"title":{},"body":{"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{}}}],["empty.ts",{"_index":184,"title":{},"body":{"interfaces/IsEmptyOptions.html":{},"coverage.html":{}}}],["enable",{"_index":121,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{}}}],["end",{"_index":179,"title":{},"body":{"pipes/ElapsedTimePipe.html":{},"pipes/StringEndsWithPipe.html":{}}}],["ends",{"_index":280,"title":{},"body":{"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"coverage.html":{}}}],["entities",{"_index":392,"title":{},"body":{"pipes/StringUnescapePipe.html":{}}}],["example",{"_index":27,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["execute",{"_index":484,"title":{},"body":{"index.html":{}}}],["export",{"_index":49,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"pipes/BytesToMegabytesPipe.html":{},"modules/DatetimePipesModule.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"modules/PipesModule.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{}}}],["exports",{"_index":68,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"overview.html":{}}}],["false",{"_index":129,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringStartsWithPipe.html":{}}}],["file",{"_index":5,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"pipes/BytesToMegabytesPipe.html":{},"modules/DatetimePipesModule.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"modules/PipesModule.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"index.html":{}}}],["finish",{"_index":151,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{}}}],["folder",{"_index":475,"title":{},"body":{"index.html":{}}}],["following",{"_index":402,"title":{},"body":{"pipes/TimestampPipe.html":{}}}],["forget",{"_index":463,"title":{},"body":{"index.html":{}}}],["format",{"_index":172,"title":{},"body":{"pipes/ElapsedTimePipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"modules/StringTransformPipesModule.html":{},"coverage.html":{}}}],["formated",{"_index":318,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["formats",{"_index":403,"title":{},"body":{"pipes/TimestampPipe.html":{}}}],["further",{"_index":487,"title":{},"body":{"index.html":{}}}],["generate",{"_index":456,"title":{},"body":{"index.html":{}}}],["generated",{"_index":449,"title":{},"body":{"index.html":{}}}],["getting",{"_index":445,"title":{"index.html":{}},"body":{}}],["gi",{"_index":326,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["given",{"_index":286,"title":{},"body":{"pipes/StringEndsWithPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["glue",{"_index":36,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["go",{"_index":474,"title":{},"body":{"index.html":{}}}],["graph",{"_index":494,"title":{},"body":{"modules.html":{}}}],["hello",{"_index":304,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["help",{"_index":488,"title":{},"body":{"index.html":{}}}],["helpers/elapsed",{"_index":181,"title":{},"body":{"pipes/ElapsedTimePipe.html":{}}}],["helpers/is",{"_index":131,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{}}}],["helpers/progress",{"_index":249,"title":{},"body":{"pipes/ProgressPipe.html":{}}}],["hh",{"_index":162,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{}}}],["hh:]mm:ss[.msec",{"_index":173,"title":{},"body":{"pipes/ElapsedTimePipe.html":{}}}],["html",{"_index":263,"title":{},"body":{"pipes/SafeHtmlPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringUnescapePipe.html":{}}}],["html.pipe",{"_index":424,"title":{},"body":{"modules/UtilsPipesModule.html":{}}}],["html.pipe.ts",{"_index":253,"title":{},"body":{"pipes/SafeHtmlPipe.html":{},"coverage.html":{}}}],["html.pipe.ts:26",{"_index":262,"title":{},"body":{"pipes/SafeHtmlPipe.html":{}}}],["identifier",{"_index":429,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":148,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"interfaces/IsEmptyOptions.html":{},"modules/PipesModule.html":{},"interfaces/ProgressOptions.html":{}}}],["implementation",{"_index":254,"title":{},"body":{"pipes/SafeHtmlPipe.html":{}}}],["implements",{"_index":51,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["import",{"_index":46,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"pipes/BytesToMegabytesPipe.html":{},"modules/DatetimePipesModule.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"modules/PipesModule.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{}}}],["imports",{"_index":219,"title":{},"body":{"modules/PipesModule.html":{}}}],["includes",{"_index":330,"title":{},"body":{"pipes/StringIncludesPipe.html":{}}}],["includes.pipe",{"_index":283,"title":{},"body":{"modules/StringCheckPipesModule.html":{}}}],["includes.pipe.ts",{"_index":328,"title":{},"body":{"pipes/StringIncludesPipe.html":{},"coverage.html":{}}}],["includes.pipe.ts:27",{"_index":333,"title":{},"body":{"pipes/StringIncludesPipe.html":{}}}],["index",{"_index":138,"title":{"index.html":{}},"body":{"interfaces/ElapsedTimeOptions.html":{},"interfaces/IsEmptyOptions.html":{},"interfaces/ProgressOptions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"pipes/BytesToMegabytesPipe.html":{},"modules/DatetimePipesModule.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"modules/PipesModule.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{}}}],["input",{"_index":93,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{}}}],["inserts",{"_index":336,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["inspect",{"_index":291,"title":{},"body":{"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringStartsWithPipe.html":{}}}],["instead",{"_index":118,"title":{},"body":{"pipes/DefaultValuePipe.html":{}}}],["interface",{"_index":133,"title":{"interfaces/ElapsedTimeOptions.html":{},"interfaces/IsEmptyOptions.html":{},"interfaces/ProgressOptions.html":{}},"body":{"interfaces/ElapsedTimeOptions.html":{},"interfaces/IsEmptyOptions.html":{},"interfaces/ProgressOptions.html":{},"coverage.html":{}}}],["interfaces",{"_index":135,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"interfaces/IsEmptyOptions.html":{},"interfaces/ProgressOptions.html":{},"overview.html":{}}}],["interval",{"_index":243,"title":{},"body":{"pipes/ProgressPipe.html":{}}}],["isempty",{"_index":130,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{}}}],["isempty(value",{"_index":132,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{}}}],["isemptyoptions",{"_index":125,"title":{"interfaces/IsEmptyOptions.html":{}},"body":{"pipes/DefaultValuePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"coverage.html":{}}}],["isemptypipe",{"_index":189,"title":{"pipes/IsEmptyPipe.html":{}},"body":{"pipes/IsEmptyPipe.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"overview.html":{}}}],["ismoment",{"_index":145,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"pipes/TimestampPipe.html":{}}}],["ismoment(finish",{"_index":157,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{}}}],["ismoment(start",{"_index":154,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{}}}],["ismoment(value",{"_index":406,"title":{},"body":{"pipes/TimestampPipe.html":{}}}],["isnotempty",{"_index":196,"title":{},"body":{"pipes/IsNotEmptyPipe.html":{}}}],["isnotemptypipe",{"_index":195,"title":{"pipes/IsNotEmptyPipe.html":{}},"body":{"pipes/IsNotEmptyPipe.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"overview.html":{}}}],["isnotnull",{"_index":199,"title":{},"body":{"pipes/IsNotNullPipe.html":{}}}],["isnotnullpipe",{"_index":197,"title":{"pipes/IsNotNullPipe.html":{}},"body":{"pipes/IsNotNullPipe.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"overview.html":{}}}],["isnotundefined",{"_index":203,"title":{},"body":{"pipes/IsNotUndefinedPipe.html":{}}}],["isnotundefinedpipe",{"_index":201,"title":{"pipes/IsNotUndefinedPipe.html":{}},"body":{"pipes/IsNotUndefinedPipe.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"overview.html":{}}}],["isnull",{"_index":206,"title":{},"body":{"pipes/IsNullPipe.html":{}}}],["isnullpipe",{"_index":205,"title":{"pipes/IsNullPipe.html":{}},"body":{"pipes/IsNullPipe.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"overview.html":{}}}],["isundefined",{"_index":208,"title":{},"body":{"pipes/IsUndefinedPipe.html":{}}}],["isundefinedpipe",{"_index":207,"title":{"pipes/IsUndefinedPipe.html":{}},"body":{"pipes/IsUndefinedPipe.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"overview.html":{}}}],["it's",{"_index":371,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["item",{"_index":23,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["join.pipe",{"_index":77,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{}}}],["join.pipe.ts",{"_index":8,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"coverage.html":{}}}],["join.pipe.ts:24",{"_index":38,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["karma",{"_index":486,"title":{},"body":{"index.html":{}}}],["key",{"_index":317,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["last",{"_index":375,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["legend",{"_index":64,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"overview.html":{}}}],["len",{"_index":382,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["length",{"_index":95,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{},"interfaces/ProgressOptions.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["less",{"_index":229,"title":{},"body":{"interfaces/ProgressOptions.html":{}}}],["lessonevaluedecimalpartlength",{"_index":223,"title":{},"body":{"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{}}}],["library",{"_index":448,"title":{},"body":{"index.html":{}}}],["line",{"_index":337,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["list",{"_index":315,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["literal",{"_index":383,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["longer",{"_index":372,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["matching",{"_index":58,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"pipes/BytesToMegabytesPipe.html":{},"modules/DatetimePipesModule.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"modules/PipesModule.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["math.min((pos",{"_index":295,"title":{},"body":{"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{}}}],["math.min(position",{"_index":356,"title":{},"body":{"pipes/StringStartsWithPipe.html":{}}}],["maximum",{"_index":248,"title":{},"body":{"pipes/ProgressPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["maxvalue",{"_index":237,"title":{},"body":{"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{}}}],["mb",{"_index":86,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{}}}],["mb.tofixed(digits",{"_index":101,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{}}}],["megabytes",{"_index":83,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{}}}],["metadata",{"_index":31,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["methods",{"_index":33,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["milliseconds",{"_index":143,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"pipes/TimestampPipe.html":{}}}],["miscellaneous",{"_index":500,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mm}:${ss}${o.withms",{"_index":163,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{}}}],["module",{"_index":60,"title":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"modules/PipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{}},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"overview.html":{}}}],["modules",{"_index":62,"title":{"modules.html":{}},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"modules/PipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":144,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"pipes/TimestampPipe.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{}}}],["moment(finish",{"_index":158,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{}}}],["moment(start",{"_index":155,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{}}}],["moment(value).valueof",{"_index":407,"title":{},"body":{"pipes/TimestampPipe.html":{}}}],["moment.duration(timeto.diff(timefrom",{"_index":160,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{}}}],["moments",{"_index":171,"title":{},"body":{"pipes/ElapsedTimePipe.html":{}}}],["more",{"_index":489,"title":{},"body":{"index.html":{}}}],["ms",{"_index":164,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{}}}],["n",{"_index":343,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["name",{"_index":32,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"index.html":{}}}],["new",{"_index":12,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"coverage.html":{},"index.html":{}}}],["newlines",{"_index":340,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["ng",{"_index":455,"title":{},"body":{"index.html":{}}}],["ngmodule",{"_index":76,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"modules/PipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{}}}],["ngx",{"_index":459,"title":{},"body":{"index.html":{}}}],["ngxpipes",{"_index":447,"title":{},"body":{"index.html":{}}}],["nl2br.pipe",{"_index":368,"title":{},"body":{"modules/StringTransformPipesModule.html":{}}}],["nl2br.pipe.ts",{"_index":335,"title":{},"body":{"pipes/StringNl2brPipe.html":{},"coverage.html":{}}}],["nl2br.pipe.ts:24",{"_index":347,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["note",{"_index":461,"title":{},"body":{"index.html":{}}}],["now",{"_index":180,"title":{},"body":{"pipes/ElapsedTimePipe.html":{}}}],["npm",{"_index":478,"title":{},"body":{"index.html":{}}}],["null",{"_index":116,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/StringStartsWithPipe.html":{}}}],["null.pipe",{"_index":425,"title":{},"body":{"modules/UtilsPipesModule.html":{}}}],["null.pipe.ts",{"_index":198,"title":{},"body":{"pipes/IsNotNullPipe.html":{},"pipes/IsNullPipe.html":{},"coverage.html":{}}}],["null.pipe.ts:20",{"_index":200,"title":{},"body":{"pipes/IsNotNullPipe.html":{},"pipes/IsNullPipe.html":{}}}],["number",{"_index":89,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/TimestampPipe.html":{},"miscellaneous/typealiases.html":{}}}],["number'].includes(typeof",{"_index":321,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["o",{"_index":152,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"interfaces/ProgressOptions.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["object",{"_index":316,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["omission",{"_index":379,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["one",{"_index":22,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["optional",{"_index":41,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["options",{"_index":120,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["options?.checkemptystring",{"_index":187,"title":{},"body":{"interfaces/IsEmptyOptions.html":{}}}],["out",{"_index":74,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"pipes/SafeHtmlPipe.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":496,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":438,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":52,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["parameters",{"_index":39,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["params",{"_index":320,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["params[param",{"_index":327,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["peer",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":0,"title":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"coverage.html":{}}}],["pipes",{"_index":2,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"index.html":{},"overview.html":{}}}],["pipes.module",{"_index":211,"title":{},"body":{"modules/PipesModule.html":{}}}],["pipes.module.ts",{"_index":75,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{}}}],["pipesmodule",{"_index":209,"title":{"modules/PipesModule.html":{}},"body":{"modules/PipesModule.html":{},"modules.html":{}}}],["pipetransform",{"_index":47,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["place",{"_index":306,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["pos",{"_index":294,"title":{},"body":{"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringStartsWithPipe.html":{}}}],["position",{"_index":289,"title":{},"body":{"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringStartsWithPipe.html":{}}}],["potentially",{"_index":341,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["process",{"_index":348,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["processed",{"_index":349,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["progress",{"_index":236,"title":{},"body":{"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{}}}],["progress(value",{"_index":250,"title":{},"body":{"pipes/ProgressPipe.html":{}}}],["progressoptions",{"_index":220,"title":{"interfaces/ProgressOptions.html":{}},"body":{"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"coverage.html":{}}}],["progresspipe",{"_index":240,"title":{"pipes/ProgressPipe.html":{}},"body":{"pipes/ProgressPipe.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"overview.html":{}}}],["project",{"_index":458,"title":{},"body":{"index.html":{}}}],["properties",{"_index":139,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"interfaces/IsEmptyOptions.html":{},"interfaces/ProgressOptions.html":{}}}],["providers",{"_index":67,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"overview.html":{}}}],["publish",{"_index":479,"title":{},"body":{"index.html":{}}}],["publishing",{"_index":472,"title":{},"body":{"index.html":{}}}],["readme",{"_index":490,"title":{},"body":{"index.html":{}}}],["regexp(`\\\\{${param",{"_index":325,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["replace",{"_index":127,"title":{},"body":{"pipes/DefaultValuePipe.html":{}}}],["replaced",{"_index":378,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["replacing",{"_index":314,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["reset",{"_index":73,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"overview.html":{}}}],["result",{"_index":57,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"pipes/BytesToMegabytesPipe.html":{},"modules/DatetimePipesModule.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"modules/PipesModule.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["result.replace(new",{"_index":324,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["result.tofixed(o.zerovaluedecimalpartlength",{"_index":239,"title":{},"body":{"interfaces/ProgressOptions.html":{}}}],["results",{"_index":59,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"pipes/BytesToMegabytesPipe.html":{},"modules/DatetimePipesModule.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"modules/PipesModule.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":54,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["returned",{"_index":24,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["returns",{"_index":11,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["run",{"_index":454,"title":{},"body":{"index.html":{}}}],["running",{"_index":480,"title":{},"body":{"index.html":{}}}],["safehtml",{"_index":260,"title":{},"body":{"pipes/SafeHtmlPipe.html":{}}}],["safehtmlpipe",{"_index":251,"title":{"pipes/SafeHtmlPipe.html":{}},"body":{"pipes/SafeHtmlPipe.html":{},"modules/UtilsPipesModule.html":{},"coverage.html":{},"overview.html":{}}}],["sanitizebeforehand",{"_index":346,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["sanitized",{"_index":266,"title":{},"body":{"pipes/SafeHtmlPipe.html":{}}}],["sanitizer",{"_index":270,"title":{},"body":{"pipes/SafeHtmlPipe.html":{},"pipes/StringNl2brPipe.html":{}}}],["sanitizing",{"_index":265,"title":{},"body":{"pipes/SafeHtmlPipe.html":{},"pipes/StringNl2brPipe.html":{}}}],["scaffolding",{"_index":453,"title":{},"body":{"index.html":{}}}],["search",{"_index":292,"title":{},"body":{"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringStartsWithPipe.html":{}}}],["securitycontext",{"_index":350,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["separated",{"_index":17,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["separator",{"_index":21,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["shortcodes",{"_index":313,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["show",{"_index":142,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{}}}],["simple",{"_index":302,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["size",{"_index":92,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{}}}],["source",{"_index":4,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"pipes/BytesToMegabytesPipe.html":{},"modules/DatetimePipesModule.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"modules/PipesModule.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{}}}],["space",{"_index":19,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{}}}],["specified",{"_index":20,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["src/.../elapsed",{"_index":503,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/helpers/elapsed",{"_index":136,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/helpers/is",{"_index":183,"title":{},"body":{"interfaces/IsEmptyOptions.html":{},"coverage.html":{}}}],["src/lib/helpers/progress.ts",{"_index":221,"title":{},"body":{"interfaces/ProgressOptions.html":{},"coverage.html":{}}}],["src/lib/pipes/array",{"_index":6,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"coverage.html":{}}}],["src/lib/pipes/datetime",{"_index":108,"title":{},"body":{"modules/DatetimePipesModule.html":{}}}],["src/lib/pipes/datetime/elapsed",{"_index":165,"title":{},"body":{"pipes/ElapsedTimePipe.html":{},"coverage.html":{}}}],["src/lib/pipes/datetime/timestamp.pipe.ts",{"_index":400,"title":{},"body":{"pipes/TimestampPipe.html":{},"coverage.html":{}}}],["src/lib/pipes/datetime/timestamp.pipe.ts:21",{"_index":404,"title":{},"body":{"pipes/TimestampPipe.html":{}}}],["src/lib/pipes/pipes.module.ts",{"_index":210,"title":{},"body":{"modules/PipesModule.html":{}}}],["src/lib/pipes/string",{"_index":278,"title":{},"body":{"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"coverage.html":{}}}],["src/lib/pipes/units",{"_index":412,"title":{},"body":{"modules/UnitsPipesModule.html":{}}}],["src/lib/pipes/units/bytestomegabytes.pipe.ts",{"_index":79,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{},"coverage.html":{}}}],["src/lib/pipes/units/bytestomegabytes.pipe.ts:24",{"_index":91,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{}}}],["src/lib/pipes/utils",{"_index":417,"title":{},"body":{"modules/UtilsPipesModule.html":{}}}],["src/lib/pipes/utils/default",{"_index":113,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"coverage.html":{}}}],["src/lib/pipes/utils/is",{"_index":190,"title":{},"body":{"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"coverage.html":{}}}],["src/lib/pipes/utils/progress.pipe.ts",{"_index":241,"title":{},"body":{"pipes/ProgressPipe.html":{},"coverage.html":{}}}],["src/lib/pipes/utils/progress.pipe.ts:32",{"_index":246,"title":{},"body":{"pipes/ProgressPipe.html":{}}}],["src/lib/pipes/utils/safe",{"_index":252,"title":{},"body":{"pipes/SafeHtmlPipe.html":{},"coverage.html":{}}}],["start",{"_index":150,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{}}}],["started",{"_index":446,"title":{"index.html":{}},"body":{}}],["starts",{"_index":282,"title":{},"body":{"modules/StringCheckPipesModule.html":{},"pipes/StringStartsWithPipe.html":{},"coverage.html":{}}}],["starttime",{"_index":174,"title":{},"body":{"pipes/ElapsedTimePipe.html":{}}}],["statements",{"_index":430,"title":{},"body":{"coverage.html":{}}}],["stored",{"_index":469,"title":{},"body":{"index.html":{}}}],["string",{"_index":13,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"modules/PipesModule.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"miscellaneous/typealiases.html":{}}}],["stringcheckpipesmodule",{"_index":213,"title":{"modules/StringCheckPipesModule.html":{}},"body":{"modules/PipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules.html":{},"overview.html":{}}}],["stringendswith",{"_index":288,"title":{},"body":{"pipes/StringEndsWithPipe.html":{}}}],["stringendswithpipe",{"_index":275,"title":{"pipes/StringEndsWithPipe.html":{}},"body":{"modules/StringCheckPipesModule.html":{},"pipes/StringEndsWithPipe.html":{},"coverage.html":{},"overview.html":{}}}],["stringformatunicorn",{"_index":307,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["stringformatunicornpipe",{"_index":297,"title":{"pipes/StringFormatUnicornPipe.html":{}},"body":{"pipes/StringFormatUnicornPipe.html":{},"modules/StringTransformPipesModule.html":{},"coverage.html":{},"overview.html":{}}}],["stringincludes",{"_index":332,"title":{},"body":{"pipes/StringIncludesPipe.html":{}}}],["stringincludespipe",{"_index":276,"title":{"pipes/StringIncludesPipe.html":{}},"body":{"modules/StringCheckPipesModule.html":{},"pipes/StringIncludesPipe.html":{},"coverage.html":{},"overview.html":{}}}],["stringnl2br",{"_index":345,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["stringnl2brpipe",{"_index":334,"title":{"pipes/StringNl2brPipe.html":{}},"body":{"pipes/StringNl2brPipe.html":{},"modules/StringTransformPipesModule.html":{},"coverage.html":{},"overview.html":{}}}],["stringstartswith",{"_index":354,"title":{},"body":{"pipes/StringStartsWithPipe.html":{}}}],["stringstartswithpipe",{"_index":277,"title":{"pipes/StringStartsWithPipe.html":{}},"body":{"modules/StringCheckPipesModule.html":{},"pipes/StringStartsWithPipe.html":{},"coverage.html":{},"overview.html":{}}}],["stringtransformpipesmodule",{"_index":214,"title":{"modules/StringTransformPipesModule.html":{}},"body":{"modules/PipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules.html":{},"overview.html":{}}}],["stringtruncate",{"_index":389,"title":{},"body":{"pipes/StringTruncatePipe.html":{}}}],["stringtruncatebywords",{"_index":381,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{}}}],["stringtruncatebywordspipe",{"_index":360,"title":{"pipes/StringTruncateByWordsPipe.html":{}},"body":{"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"coverage.html":{},"overview.html":{}}}],["stringtruncatepipe",{"_index":361,"title":{"pipes/StringTruncatePipe.html":{}},"body":{"modules/StringTransformPipesModule.html":{},"pipes/StringTruncatePipe.html":{},"coverage.html":{},"overview.html":{}}}],["stringunescape",{"_index":396,"title":{},"body":{"pipes/StringUnescapePipe.html":{}}}],["stringunescapepipe",{"_index":362,"title":{"pipes/StringUnescapePipe.html":{}},"body":{"modules/StringTransformPipesModule.html":{},"pipes/StringUnescapePipe.html":{},"coverage.html":{},"overview.html":{}}}],["stripping",{"_index":257,"title":{},"body":{"pipes/SafeHtmlPipe.html":{}}}],["subbing",{"_index":300,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["substring",{"_index":331,"title":{},"body":{"pipes/StringIncludesPipe.html":{}}}],["support",{"_index":491,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":492,"title":{},"body":{"modules.html":{}}}],["symbol",{"_index":376,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{}}}],["table",{"_index":437,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":436,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":287,"title":{},"body":{"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringStartsWithPipe.html":{}}}],["templates",{"_index":303,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["test",{"_index":483,"title":{},"body":{"index.html":{}}}],["tests",{"_index":482,"title":{},"body":{"index.html":{}}}],["text/html')?.documentelement?.textcontent",{"_index":399,"title":{},"body":{"pipes/StringUnescapePipe.html":{}}}],["textparsed",{"_index":351,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["this.sanitizer.bypasssecuritytrusthtml(html",{"_index":271,"title":{},"body":{"pipes/SafeHtmlPipe.html":{}}}],["this.sanitizer.sanitize(securitycontext.html",{"_index":353,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["through",{"_index":119,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{}}}],["time",{"_index":168,"title":{},"body":{"pipes/ElapsedTimePipe.html":{}}}],["time.pipe",{"_index":110,"title":{},"body":{"modules/DatetimePipesModule.html":{}}}],["time.pipe.ts",{"_index":166,"title":{},"body":{"pipes/ElapsedTimePipe.html":{},"coverage.html":{}}}],["time.pipe.ts:30",{"_index":178,"title":{},"body":{"pipes/ElapsedTimePipe.html":{}}}],["time.ts",{"_index":137,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["timefrom",{"_index":153,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{}}}],["timestamp",{"_index":401,"title":{},"body":{"pipes/TimestampPipe.html":{}}}],["timestamppipe",{"_index":107,"title":{"pipes/TimestampPipe.html":{}},"body":{"modules/DatetimePipesModule.html":{},"pipes/TimestampPipe.html":{},"coverage.html":{},"overview.html":{}}}],["timeto",{"_index":156,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{}}}],["transform",{"_index":34,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"modules/PipesModule.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["transform(html",{"_index":261,"title":{},"body":{"pipes/SafeHtmlPipe.html":{}}}],["transform(size",{"_index":88,"title":{},"body":{"pipes/BytesToMegabytesPipe.html":{}}}],["transform(start",{"_index":177,"title":{},"body":{"pipes/ElapsedTimePipe.html":{}}}],["transform(value",{"_index":35,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["transform/array",{"_index":7,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"modules/ArrayTransformPipesModule.html":{},"coverage.html":{}}}],["transform/string",{"_index":298,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{},"pipes/StringNl2brPipe.html":{},"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"coverage.html":{}}}],["true",{"_index":176,"title":{},"body":{"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{}}}],["true/false",{"_index":194,"title":{},"body":{"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{}}}],["truncate",{"_index":364,"title":{},"body":{"modules/StringTransformPipesModule.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"coverage.html":{}}}],["truncate.pipe",{"_index":366,"title":{},"body":{"modules/StringTransformPipesModule.html":{}}}],["truncate.pipe.ts",{"_index":387,"title":{},"body":{"pipes/StringTruncatePipe.html":{},"coverage.html":{}}}],["truncate.pipe.ts:29",{"_index":390,"title":{},"body":{"pipes/StringTruncatePipe.html":{}}}],["truncated",{"_index":377,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["truncates",{"_index":370,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["tslib",{"_index":439,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":170,"title":{},"body":{"pipes/ElapsedTimePipe.html":{}}}],["type",{"_index":40,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/SafeHtmlPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":501,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":186,"title":{},"body":{"interfaces/IsEmptyOptions.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{}}}],["undefined",{"_index":53,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsUndefinedPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{}}}],["undefined.pipe",{"_index":426,"title":{},"body":{"modules/UtilsPipesModule.html":{}}}],["undefined.pipe.ts",{"_index":202,"title":{},"body":{"pipes/IsNotUndefinedPipe.html":{},"pipes/IsUndefinedPipe.html":{},"coverage.html":{}}}],["undefined.pipe.ts:20",{"_index":204,"title":{},"body":{"pipes/IsNotUndefinedPipe.html":{},"pipes/IsUndefinedPipe.html":{}}}],["unescape.pipe",{"_index":363,"title":{},"body":{"modules/StringTransformPipesModule.html":{}}}],["unescape.pipe.ts",{"_index":391,"title":{},"body":{"pipes/StringUnescapePipe.html":{},"coverage.html":{}}}],["unescape.pipe.ts:19",{"_index":397,"title":{},"body":{"pipes/StringUnescapePipe.html":{}}}],["unicorn.pipe",{"_index":367,"title":{},"body":{"modules/StringTransformPipesModule.html":{}}}],["unicorn.pipe.ts",{"_index":299,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{},"coverage.html":{}}}],["unicorn.pipe.ts:28",{"_index":312,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{}}}],["unit",{"_index":481,"title":{},"body":{"index.html":{}}}],["units",{"_index":216,"title":{},"body":{"modules/PipesModule.html":{}}}],["units/bytestomegabytes.pipe",{"_index":413,"title":{},"body":{"modules/UnitsPipesModule.html":{}}}],["unitspipesmodule",{"_index":215,"title":{"modules/UnitsPipesModule.html":{}},"body":{"modules/PipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules.html":{},"overview.html":{}}}],["unix",{"_index":405,"title":{},"body":{"pipes/TimestampPipe.html":{}}}],["up",{"_index":293,"title":{},"body":{"pipes/StringEndsWithPipe.html":{}}}],["use",{"_index":117,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"index.html":{}}}],["using",{"_index":26,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["utils",{"_index":218,"title":{},"body":{"modules/PipesModule.html":{}}}],["utils/default",{"_index":418,"title":{},"body":{"modules/UtilsPipesModule.html":{}}}],["utils/is",{"_index":420,"title":{},"body":{"modules/UtilsPipesModule.html":{}}}],["utils/progress.pipe",{"_index":422,"title":{},"body":{"modules/UtilsPipesModule.html":{}}}],["utils/safe",{"_index":423,"title":{},"body":{"modules/UtilsPipesModule.html":{}}}],["utilspipesmodule",{"_index":217,"title":{"modules/UtilsPipesModule.html":{}},"body":{"modules/PipesModule.html":{},"modules/UtilsPipesModule.html":{},"modules.html":{},"overview.html":{}}}],["value",{"_index":42,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"interfaces/IsEmptyOptions.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{},"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringFormatUnicornPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{},"pipes/StringUnescapePipe.html":{},"pipes/TimestampPipe.html":{}}}],["value.join(glue",{"_index":56,"title":{},"body":{"pipes/ArrayJoinPipe.html":{}}}],["value.length",{"_index":386,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["value.pipe",{"_index":419,"title":{},"body":{"modules/UtilsPipesModule.html":{}}}],["value.pipe.ts",{"_index":114,"title":{},"body":{"pipes/DefaultValuePipe.html":{},"coverage.html":{}}}],["value.pipe.ts:27",{"_index":126,"title":{},"body":{"pipes/DefaultValuePipe.html":{}}}],["value.replace(/(?:\\r\\n|\\r|\\n)/g",{"_index":352,"title":{},"body":{"pipes/StringNl2brPipe.html":{}}}],["value.slice(pos",{"_index":296,"title":{},"body":{"pipes/StringEndsWithPipe.html":{}}}],["value.tostring",{"_index":188,"title":{},"body":{"interfaces/IsEmptyOptions.html":{},"pipes/StringFormatUnicornPipe.html":{}}}],["value.valueof",{"_index":408,"title":{},"body":{"pipes/TimestampPipe.html":{}}}],["values",{"_index":301,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{},"pipes/StringNl2brPipe.html":{}}}],["variable",{"_index":192,"title":{},"body":{"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/IsNotNullPipe.html":{},"pipes/IsNotUndefinedPipe.html":{},"pipes/IsNullPipe.html":{},"pipes/IsUndefinedPipe.html":{}}}],["version",{"_index":452,"title":{},"body":{"index.html":{}}}],["via",{"_index":485,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":305,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["whether",{"_index":329,"title":{},"body":{"pipes/StringIncludesPipe.html":{}}}],["with.pipe",{"_index":281,"title":{},"body":{"modules/StringCheckPipesModule.html":{}}}],["with.pipe.ts",{"_index":284,"title":{},"body":{"pipes/StringEndsWithPipe.html":{},"pipes/StringStartsWithPipe.html":{},"coverage.html":{}}}],["with.pipe.ts:30",{"_index":355,"title":{},"body":{"pipes/StringStartsWithPipe.html":{}}}],["with.pipe.ts:33",{"_index":290,"title":{},"body":{"pipes/StringEndsWithPipe.html":{}}}],["withms",{"_index":140,"title":{},"body":{"interfaces/ElapsedTimeOptions.html":{},"pipes/ElapsedTimePipe.html":{}}}],["without",{"_index":25,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{}}}],["words",{"_index":374,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{}}}],["words.pipe",{"_index":365,"title":{},"body":{"modules/StringTransformPipesModule.html":{}}}],["words.pipe.ts",{"_index":369,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{},"coverage.html":{}}}],["words.pipe.ts:29",{"_index":384,"title":{},"body":{"pipes/StringTruncateByWordsPipe.html":{}}}],["world",{"_index":344,"title":{},"body":{"pipes/StringNl2brPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["yes",{"_index":44,"title":{},"body":{"pipes/ArrayJoinPipe.html":{},"pipes/BytesToMegabytesPipe.html":{},"pipes/DefaultValuePipe.html":{},"pipes/ElapsedTimePipe.html":{},"pipes/IsEmptyPipe.html":{},"pipes/IsNotEmptyPipe.html":{},"pipes/ProgressPipe.html":{},"pipes/StringEndsWithPipe.html":{},"pipes/StringIncludesPipe.html":{},"pipes/StringNl2brPipe.html":{},"pipes/StringStartsWithPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["york",{"_index":309,"title":{},"body":{"pipes/StringFormatUnicornPipe.html":{},"pipes/StringTruncateByWordsPipe.html":{},"pipes/StringTruncatePipe.html":{}}}],["zero",{"_index":233,"title":{},"body":{"interfaces/ProgressOptions.html":{}}}],["zerovaluedecimalpartlength",{"_index":224,"title":{},"body":{"interfaces/ProgressOptions.html":{},"pipes/ProgressPipe.html":{}}}],["zoom",{"_index":72,"title":{},"body":{"modules/ArrayTransformPipesModule.html":{},"modules/DatetimePipesModule.html":{},"modules/StringCheckPipesModule.html":{},"modules/StringTransformPipesModule.html":{},"modules/UnitsPipesModule.html":{},"modules/UtilsPipesModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"pipes/ArrayJoinPipe.html":{"url":"pipes/ArrayJoinPipe.html","title":"pipe - ArrayJoinPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  ArrayJoinPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/array-transform/array-join.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Creates and returns a new string by concatenating all of the elements in an array,\nseparated by commas and space or a specified separator string.\nIf the array has only one item, then that item will be returned without using the separator.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            {{ [1,2,3,4] | arrayJoin }} \n                        \n                        \n                            {{ [1,2,3,4] | arrayJoin:'--' }} \n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        arrayJoin\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string[], glue?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/array-transform/array-join.pipe.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The array to concatenation\n\n                                    \n                                \n                                \n                                    glue\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The glue for concatenation (default: ', ')\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Returns string by concatenating all of the elements in an array\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Creates and returns a new string by concatenating all of the elements in an array,\n * separated by commas and space or a specified separator string.\n * If the array has only one item, then that item will be returned without using the separator.\n *\n * @example\n * {{ [1,2,3,4] | arrayJoin }} \n *\n * @example\n * {{ [1,2,3,4] | arrayJoin:'--' }} \n */\n@Pipe({\n  name: 'arrayJoin'\n})\nexport class ArrayJoinPipe implements PipeTransform {\n  /**\n   * @param [value] The array to concatenation\n   * @param [glue] The glue for concatenation (default: ', ')\n   *\n   * @returns Returns string by concatenating all of the elements in an array\n   */\n  transform(value: string[], glue?: string): string {\n    if (glue === undefined) glue = ', ';\n    return Array.isArray(value) ? value.join(glue) : '';\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ArrayTransformPipesModule.html":{"url":"modules/ArrayTransformPipesModule.html","title":"module - ArrayTransformPipesModule","body":"\n                   \n\n\n\n\n    Modules\n    ArrayTransformPipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ArrayTransformPipesModule\n\n\n\ncluster_ArrayTransformPipesModule_declarations\n\n\n\ncluster_ArrayTransformPipesModule_exports\n\n\n\n\nArrayJoinPipe\n\nArrayJoinPipe\n\n\n\nArrayTransformPipesModule\n\nArrayTransformPipesModule\n\nArrayTransformPipesModule -->\n\nArrayJoinPipe->ArrayTransformPipesModule\n\n\n\n\n\nArrayJoinPipe \n\nArrayJoinPipe \n\nArrayJoinPipe  -->\n\nArrayTransformPipesModule->ArrayJoinPipe \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/array-transform-pipes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ArrayJoinPipe\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ArrayJoinPipe\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { ArrayJoinPipe } from './array-transform/array-join.pipe';\n\n@NgModule({\n  declarations: [\n    ArrayJoinPipe\n  ],\n  exports: [\n    ArrayJoinPipe\n  ]\n})\nexport class ArrayTransformPipesModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/BytesToMegabytesPipe.html":{"url":"pipes/BytesToMegabytesPipe.html","title":"pipe - BytesToMegabytesPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  BytesToMegabytesPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/units/bytesToMegabytes.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Convert value with the amount of bytes to megabytes.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            {{ 1234567890 | bytesToMegabytes }}Mb\n\n                        \n                        \n                            {{ 1234567890 | bytesToMegabytes: 2 }}Mb\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        bytesToMegabytes\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(size: number, digits?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/units/bytesToMegabytes.pipe.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    size\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Input value with the amount of bytes\n\n                                    \n                                \n                                \n                                    digits\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Decimal length of the result (Default: 1)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Converted value\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Convert value with the amount of bytes to megabytes.\n *\n * @example\n * {{ 1234567890 | bytesToMegabytes }}Mb\n * \n *\n * @example\n * {{ 1234567890 | bytesToMegabytes: 2 }}Mb\n * \n */\n@Pipe({\n  name: 'bytesToMegabytes'\n})\nexport class BytesToMegabytesPipe implements PipeTransform {\n  /**\n   * @param [size] Input value with the amount of bytes\n   * @param [digits] Decimal length of the result (Default: 1)\n   *\n   * @returns Converted value\n   */\n  transform(size: number, digits?: number): string {\n    if (digits === undefined) digits = 1;\n    const mb = size ? size / 1000000 : 0;\n    return `${mb.toFixed(digits)}`;\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatetimePipesModule.html":{"url":"modules/DatetimePipesModule.html","title":"module - DatetimePipesModule","body":"\n                   \n\n\n\n\n    Modules\n    DatetimePipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DatetimePipesModule\n\n\n\ncluster_DatetimePipesModule_declarations\n\n\n\ncluster_DatetimePipesModule_exports\n\n\n\n\nElapsedTimePipe\n\nElapsedTimePipe\n\n\n\nDatetimePipesModule\n\nDatetimePipesModule\n\nDatetimePipesModule -->\n\nElapsedTimePipe->DatetimePipesModule\n\n\n\n\n\nTimestampPipe\n\nTimestampPipe\n\nDatetimePipesModule -->\n\nTimestampPipe->DatetimePipesModule\n\n\n\n\n\nElapsedTimePipe \n\nElapsedTimePipe \n\nElapsedTimePipe  -->\n\nDatetimePipesModule->ElapsedTimePipe \n\n\n\n\n\nTimestampPipe \n\nTimestampPipe \n\nTimestampPipe  -->\n\nDatetimePipesModule->TimestampPipe \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/datetime-pipes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ElapsedTimePipe\n                        \n                        \n                            TimestampPipe\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ElapsedTimePipe\n                        \n                        \n                            TimestampPipe\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { ElapsedTimePipe } from './datetime/elapsed-time.pipe';\nimport { TimestampPipe } from './datetime/timestamp.pipe';\n\n@NgModule({\n  declarations: [\n    ElapsedTimePipe,\n    TimestampPipe\n  ],\n  exports: [\n    ElapsedTimePipe,\n    TimestampPipe\n  ]\n})\nexport class DatetimePipesModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/DefaultValuePipe.html":{"url":"pipes/DefaultValuePipe.html","title":"pipe - DefaultValuePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  DefaultValuePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/utils/default-value.pipe.ts\n        \n\n            \n                Description\n            \n            \n                If the value is empty (undefined or null), use a default value instead.\nThrough the options can enable also check an empty string.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            {{ null | defaultValue: 'Empty' }}\n\n                        \n                        \n                            {{ 'abc' | defaultValue: 'abc' }}\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        defaultValue\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, defaultValue: any, options?: IsEmptyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/utils/default-value.pipe.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to check and replace to default value\n\n                                    \n                                \n                                \n                                    defaultValue\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The default value\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                IsEmptyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options. (Default: { checkEmptyString: false })\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The input value if it is not empty, or the default value\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { IsEmptyOptions, isEmpty } from '../../helpers/is-empty';\n\n/**\n * If the value is empty (undefined or null), use a default value instead.\n * Through the options can enable also check an empty string.\n *\n * @example\n * {{ null | defaultValue: 'Empty' }}\n * \n *\n * @example\n * {{ 'abc' | defaultValue: 'abc' }}\n * \n */\n@Pipe({\n  name: 'defaultValue'\n})\nexport class DefaultValuePipe implements PipeTransform {\n  /**\n   * @param [value] The value to check and replace to default value\n   * @param [defaultValue] The default value\n   * @param [options] Options. (Default: { checkEmptyString: false })\n   *\n   * @returns The input value if it is not empty, or the default value\n   */\n  transform(value: any, defaultValue: any, options?: IsEmptyOptions): any {\n    return isEmpty(value, options) ? defaultValue : value;\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ElapsedTimeOptions.html":{"url":"interfaces/ElapsedTimeOptions.html","title":"interface - ElapsedTimeOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ElapsedTimeOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/helpers/elapsed-time.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        withMs\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        withMs\n                                    \n                                \n                                \n                                    \n                                        withMs:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Show milliseconds in a result\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Moment, isMoment } from 'moment';\nimport * as moment from 'moment';\n\nexport type ElapsedTimeArgument = string | number | Moment | Date;\n\nexport interface ElapsedTimeOptions {\n  /**\n   * Show milliseconds in a result\n   */\n  withMs?: boolean;\n}\n\n/**\n * @ignore\n */\nexport const elapsedTime = (start: ElapsedTimeArgument, finish: ElapsedTimeArgument, options: ElapsedTimeOptions) => {\n  const o: ElapsedTimeOptions = {\n    withMs: false,\n    ... (options || {})\n  };\n  const timeFrom: Moment = start ? (!isMoment(start) ? moment(start) : start) : moment();\n  const timeTo: Moment = !isMoment(finish) ? moment(finish) : finish;\n  const dur = moment.duration(timeTo.diff(timeFrom));\n  if (dur.asMilliseconds()  0 ? `${hh}:` : ''}${mm}:${ss}${o.withMs ? `.${ms}` : ''}`;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/ElapsedTimePipe.html":{"url":"pipes/ElapsedTimePipe.html","title":"pipe - ElapsedTimePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  ElapsedTimePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/datetime/elapsed-time.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Get the elapsed time between two moments in the format [HH:]MM:SS[.msec]\n\n            \n\n            \n                Example\n            \n            \n                        \n                            \n{{ startTime | elapsedTime:finishTime }} \n                        \n                        \n                            \n{{ startTime | elapsedTime:finishTime }} \n                        \n                        \n                            \n{{ startTime | elapsedTime:finishTime:{ withMs: true } }} \n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        elapsedTime\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(start: ElapsedTimeArgument, finish: ElapsedTimeArgument, options?: ElapsedTimeOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/datetime/elapsed-time.pipe.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    start\n                                    \n                                                ElapsedTimeArgument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The start time\n\n                                    \n                                \n                                \n                                    finish\n                                    \n                                                ElapsedTimeArgument\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The end time (default: now)\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ElapsedTimeOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Returns string in the format [HH:]MM:SS[.msec]\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { elapsedTime, ElapsedTimeArgument, ElapsedTimeOptions } from '../../helpers/elapsed-time';\n\n/**\n * Get the elapsed time between two moments in the format [HH:]MM:SS[.msec]\n *\n * @example\n * \n * {{ startTime | elapsedTime:finishTime }} \n *\n * @example\n * \n * {{ startTime | elapsedTime:finishTime }} \n *\n * @example\n * \n * {{ startTime | elapsedTime:finishTime:{ withMs: true } }} \n */\n@Pipe({\n  name: 'elapsedTime'\n})\nexport class ElapsedTimePipe implements PipeTransform {\n  /**\n   * @param [start] The start time\n   * @param [finish] The end time (default: now)\n   * @param [options] Options\n   *\n   * @returns Returns string in the format [HH:]MM:SS[.msec]\n   */\n  transform(start: ElapsedTimeArgument, finish: ElapsedTimeArgument, options?: ElapsedTimeOptions ): string {\n    return elapsedTime(start, finish, options);\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IsEmptyOptions.html":{"url":"interfaces/IsEmptyOptions.html","title":"interface - IsEmptyOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IsEmptyOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/helpers/is-empty.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        checkEmptyString\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        checkEmptyString\n                                    \n                                \n                                \n                                    \n                                        checkEmptyString:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Enable checking for an empty string.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface IsEmptyOptions {\n  /**\n   * Enable checking for an empty string.\n   */\n  checkEmptyString?: boolean;\n}\n\n/**\n * @ignore\n */\nexport const isEmpty = (value: any, options: IsEmptyOptions) => {\n  if (typeof value === 'undefined' || value === null) return true;\n  if (options?.checkEmptyString && value.toString() === '') return true;\n  return false;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/IsEmptyPipe.html":{"url":"pipes/IsEmptyPipe.html","title":"pipe - IsEmptyPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  IsEmptyPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/utils/is-empty.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Returns True if the variable is undefined or is null.\nThrough the options can enable also check an empty string.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            EMPTY\nNOT EMPTY\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        isEmpty\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, options?: IsEmptyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/utils/is-empty.pipe.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to check\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                IsEmptyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options. (Default: { checkEmptyString: false })\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Check result TRUE/FALSE\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { IsEmptyOptions, isEmpty } from '../../helpers/is-empty';\n\n/**\n * Returns True if the variable is undefined or is null.\n * Through the options can enable also check an empty string.\n *\n * @example\n * EMPTY\n * NOT EMPTY\n * \n */\n@Pipe({\n  name: 'isEmpty'\n})\nexport class IsEmptyPipe implements PipeTransform {\n  /**\n   * @param [value] The value to check\n   * @param [options] Options. (Default: { checkEmptyString: false })\n   *\n   * @returns Check result TRUE/FALSE\n   */\n  transform(value: any, options?: IsEmptyOptions ): boolean {\n    return isEmpty(value, options);\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/IsNotEmptyPipe.html":{"url":"pipes/IsNotEmptyPipe.html","title":"pipe - IsNotEmptyPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  IsNotEmptyPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/utils/is-not-empty.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Returns False if the variable is undefined or is null.\nThrough the options can enable also check an empty string.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            NOT EMPTY\nEMPTY\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        isNotEmpty\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any, options?: IsEmptyOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/utils/is-not-empty.pipe.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to check\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                IsEmptyOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options. (Default: { checkEmptyString: false })\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Check result TRUE/FALSE\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { IsEmptyOptions, isEmpty } from '../../helpers/is-empty';\n\n/**\n * Returns False if the variable is undefined or is null.\n * Through the options can enable also check an empty string.\n *\n * @example\n * NOT EMPTY\n * EMPTY\n * \n */\n@Pipe({\n  name: 'isNotEmpty'\n})\nexport class IsNotEmptyPipe implements PipeTransform {\n  /**\n   * @param [value] The value to check\n   * @param [options] Options. (Default: { checkEmptyString: false })\n   *\n   * @returns Check result TRUE/FALSE\n   */\n  transform(value: any, options?: IsEmptyOptions ): boolean {\n    return !isEmpty(value, options);\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/IsNotNullPipe.html":{"url":"pipes/IsNotNullPipe.html","title":"pipe - IsNotNullPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  IsNotNullPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/utils/is-not-null.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Returns False if the variable is null.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            NOT NULL\nNULL\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        isNotNull\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/utils/is-not-null.pipe.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to check\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Check result TRUE/FALSE\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Returns False if the variable is null.\n *\n * @example\n * NOT NULL\n * NULL\n * \n */\n@Pipe({\n  name: 'isNotNull'\n})\nexport class IsNotNullPipe implements PipeTransform {\n  /**\n   * @param [value] The value to check\n   *\n   * @returns Check result TRUE/FALSE\n   */\n  transform(value: any): boolean {\n    return value !== null;\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/IsNotUndefinedPipe.html":{"url":"pipes/IsNotUndefinedPipe.html","title":"pipe - IsNotUndefinedPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  IsNotUndefinedPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/utils/is-not-undefined.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Returns False if the variable is undefined.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            NOT UNDEFINED\nUNDEFINED\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        isNotUndefined\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/utils/is-not-undefined.pipe.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to check\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Check result TRUE/FALSE\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Returns False if the variable is undefined.\n *\n * @example\n * NOT UNDEFINED\n * UNDEFINED\n * \n */\n@Pipe({\n  name: 'isNotUndefined'\n})\nexport class IsNotUndefinedPipe implements PipeTransform {\n  /**\n   * @param [value] The value to check\n   *\n   * @returns Check result TRUE/FALSE\n   */\n  transform(value: any ): boolean {\n    return value !== undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/IsNullPipe.html":{"url":"pipes/IsNullPipe.html","title":"pipe - IsNullPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  IsNullPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/utils/is-null.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Returns True if the variable is null.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            NULL\nNOT NULL\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        isNull\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/utils/is-null.pipe.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to check\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Check result TRUE/FALSE\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Returns True if the variable is null.\n *\n * @example\n * NULL\n * NOT NULL\n * \n */\n@Pipe({\n  name: 'isNull'\n})\nexport class IsNullPipe implements PipeTransform {\n  /**\n   * @param [value] The value to check\n   *\n   * @returns Check result TRUE/FALSE\n   */\n  transform(value: any ): boolean {\n    return value === null;\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/IsUndefinedPipe.html":{"url":"pipes/IsUndefinedPipe.html","title":"pipe - IsUndefinedPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  IsUndefinedPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/utils/is-undefined.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Returns True if the variable is undefined.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            UNDEFINED\nNOT UNDEFINED\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        isUndefined\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/utils/is-undefined.pipe.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to check\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Check result TRUE/FALSE\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Returns True if the variable is undefined.\n *\n * @example\n * UNDEFINED\n * NOT UNDEFINED\n * \n */\n@Pipe({\n  name: 'isUndefined'\n})\nexport class IsUndefinedPipe implements PipeTransform {\n  /**\n   * @param [value] The value to check\n   *\n   * @returns Check result TRUE/FALSE\n   */\n  transform(value: any ): boolean {\n    return value === undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PipesModule.html":{"url":"modules/PipesModule.html","title":"module - PipesModule","body":"\n                   \n\n\n\n\n    Modules\n    PipesModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/pipes.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        /**\n * @ignore\n */\nimport { NgModule } from '@angular/core';\nimport { ArrayTransformPipesModule } from './array-transform-pipes.module';\nimport { DatetimePipesModule } from './datetime-pipes.module';\nimport { StringCheckPipesModule } from './string-check-pipes.module';\nimport { StringTransformPipesModule } from './string-transform-pipes.module';\nimport { UnitsPipesModule } from './units-pipes.module';\nimport { UtilsPipesModule } from './utils-pipes.module';\n\n@NgModule({\n  imports: [\n    ArrayTransformPipesModule,\n    DatetimePipesModule,\n    StringCheckPipesModule,\n    StringTransformPipesModule,\n    UnitsPipesModule,\n    UtilsPipesModule\n  ]\n})\nexport class PipesModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProgressOptions.html":{"url":"interfaces/ProgressOptions.html","title":"interface - ProgressOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ProgressOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/helpers/progress.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        decimalPartLength\n                                \n                                \n                                            Optional\n                                        lessOneValueDecimalPartLength\n                                \n                                \n                                            Optional\n                                        zeroValueDecimalPartLength\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        decimalPartLength\n                                    \n                                \n                                \n                                    \n                                        decimalPartLength:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Default decimal length of the result (e.q. \"0\" for 10, \"1\" for 10.1, \"2\" for 10.12)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lessOneValueDecimalPartLength\n                                    \n                                \n                                \n                                    \n                                        lessOneValueDecimalPartLength:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Decimal length of the result if the result less than 1 (e.g. \"2\" for 0.12, \"1\" for 0.1)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zeroValueDecimalPartLength\n                                    \n                                \n                                \n                                    \n                                        zeroValueDecimalPartLength:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Decimal length of the result if the result is zero (e.g. \"2\" for 0.00, \"1\" for 0.0)\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ProgressOptions {\n  /**\n   *  Default decimal length of the result (e.q. \"0\" for 10, \"1\" for 10.1, \"2\" for 10.12)\n   */\n  decimalPartLength?: number;\n  /**\n   *  Decimal length of the result if the result less than 1 (e.g. \"2\" for 0.12, \"1\" for 0.1)\n   */\n  lessOneValueDecimalPartLength?: number;\n  /**\n   *  Decimal length of the result if the result is zero (e.g. \"2\" for 0.00, \"1\" for 0.0)\n   */\n  zeroValueDecimalPartLength?: number;\n}\n\n/**\n * @ignore\n */\nexport const progress = (value: number, maxValue: number, options?: ProgressOptions): string => {\n  const o: ProgressOptions = {\n    decimalPartLength: 0,\n    lessOneValueDecimalPartLength: 0,\n    zeroValueDecimalPartLength: 0,\n    ... (options || {})\n  };\n  const result = (!value || !maxValue) ? 0 : (value / maxValue) * 100;\n  if (result === 0) {\n    return result.toFixed(o.zeroValueDecimalPartLength);\n  } else if (result \n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/ProgressPipe.html":{"url":"pipes/ProgressPipe.html","title":"pipe - ProgressPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  ProgressPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/utils/progress.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Calculation of the value of progress for the interval between 0 and maxValue\n\n            \n\n            \n                Example\n            \n            \n                        \n                            {{ 500 | progress: 1000  }}\n\n                        \n                        \n                            {{ 500 | progress: 1000: { decimalPartLength: 2 }  }}\n\n                        \n                        \n                            {{ 1 | progress: 1000: { lessOneValueDecimalPartLength: 2 }  }}\n\n                        \n                        \n                            {{ 0 | progress: 1000: { zeroValueDecimalPartLength: 2 }  }}\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        progress\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: number, maxValue: number, options?: ProgressOptions)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/utils/progress.pipe.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current value for interval between 0 and maxValue\n\n                                    \n                                \n                                \n                                    maxValue\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The maximum value of interval\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                ProgressOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options (Default: { decimalPartLength: 0, lessOneValueDecimalPartLength: 0, zeroValueDecimalPartLength: 0 })\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { progress, ProgressOptions } from '../../helpers/progress';\n\n/**\n * Calculation of the value of progress for the interval between 0 and maxValue\n *\n * @example\n * {{ 500 | progress: 1000  }}\n * \n *\n * @example\n * {{ 500 | progress: 1000: { decimalPartLength: 2 }  }}\n * \n *\n * @example\n * {{ 1 | progress: 1000: { lessOneValueDecimalPartLength: 2 }  }}\n * \n *\n * @example\n * {{ 0 | progress: 1000: { zeroValueDecimalPartLength: 2 }  }}\n * \n */\n@Pipe({\n  name: 'progress'\n})\nexport class ProgressPipe implements PipeTransform {\n  /**\n   * @param [value] The current value for interval between 0 and maxValue\n   * @param [maxValue] The maximum value of interval\n   * @param [options] Options (Default: { decimalPartLength: 0, lessOneValueDecimalPartLength: 0, zeroValueDecimalPartLength: 0 })\n   */\n  transform(value: number, maxValue: number, options?: ProgressOptions): string {\n    return progress(value, maxValue, options);\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/SafeHtmlPipe.html":{"url":"pipes/SafeHtmlPipe.html","title":"pipe - SafeHtmlPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  SafeHtmlPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/utils/safe-html.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Implementation to bypass DomSanitizer stripping out content\n\n            \n\n            \n                Example\n            \n            \n                        \n                            123' | safeHtml }}\">\n123\n                        \n                        \n                            123' }}\">\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        safeHtml\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(html: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/utils/safe-html.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    html\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the html code for sanitizing\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SafeHtml\n\n                    \n                    \n                        Sanitized html\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n/**\n * Implementation to bypass DomSanitizer stripping out content\n *\n * @example\n * 123' | safeHtml }}\">\n * 123\n *\n * @example\n * 123' }}\">\n * \n */\n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  /**\n   * @param [html] the html code for sanitizing\n   * @returns Sanitized html\n   */\n  transform(html: string): SafeHtml {\n    return this.sanitizer.bypassSecurityTrustHtml(html);\n  }\n\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StringCheckPipesModule.html":{"url":"modules/StringCheckPipesModule.html","title":"module - StringCheckPipesModule","body":"\n                   \n\n\n\n\n    Modules\n    StringCheckPipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StringCheckPipesModule\n\n\n\ncluster_StringCheckPipesModule_declarations\n\n\n\ncluster_StringCheckPipesModule_exports\n\n\n\n\nStringEndsWithPipe\n\nStringEndsWithPipe\n\n\n\nStringCheckPipesModule\n\nStringCheckPipesModule\n\nStringCheckPipesModule -->\n\nStringEndsWithPipe->StringCheckPipesModule\n\n\n\n\n\nStringIncludesPipe\n\nStringIncludesPipe\n\nStringCheckPipesModule -->\n\nStringIncludesPipe->StringCheckPipesModule\n\n\n\n\n\nStringStartsWithPipe\n\nStringStartsWithPipe\n\nStringCheckPipesModule -->\n\nStringStartsWithPipe->StringCheckPipesModule\n\n\n\n\n\nStringEndsWithPipe \n\nStringEndsWithPipe \n\nStringEndsWithPipe  -->\n\nStringCheckPipesModule->StringEndsWithPipe \n\n\n\n\n\nStringIncludesPipe \n\nStringIncludesPipe \n\nStringIncludesPipe  -->\n\nStringCheckPipesModule->StringIncludesPipe \n\n\n\n\n\nStringStartsWithPipe \n\nStringStartsWithPipe \n\nStringStartsWithPipe  -->\n\nStringCheckPipesModule->StringStartsWithPipe \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/string-check-pipes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            StringEndsWithPipe\n                        \n                        \n                            StringIncludesPipe\n                        \n                        \n                            StringStartsWithPipe\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StringEndsWithPipe\n                        \n                        \n                            StringIncludesPipe\n                        \n                        \n                            StringStartsWithPipe\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { StringEndsWithPipe } from './string-check/string-ends-with.pipe';\nimport { StringStartsWithPipe } from './string-check/string-starts-with.pipe';\nimport { StringIncludesPipe } from './string-check/string-includes.pipe';\n\n@NgModule({\n  declarations: [\n    StringEndsWithPipe,\n    StringStartsWithPipe,\n    StringIncludesPipe\n  ],\n  exports: [\n    StringEndsWithPipe,\n    StringStartsWithPipe,\n    StringIncludesPipe\n  ]\n})\nexport class StringCheckPipesModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/StringEndsWithPipe.html":{"url":"pipes/StringEndsWithPipe.html","title":"pipe - StringEndsWithPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  StringEndsWithPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/string-check/string-ends-with.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Checks if string ends with the given target string.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            YES\nNO\n\n                        \n                        \n                            YES\nNO\n\n                        \n                        \n                            YES\nNO\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        stringEndsWith\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string, target: string, position?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/string-check/string-ends-with.pipe.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string to inspect\n\n                                    \n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string to search for\n\n                                    \n                                \n                                \n                                    position\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The position to search up to (optional)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Returns true if string ends with target, else false\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Checks if string ends with the given target string.\n *\n * @example\n * YES\n * NO\n * \n *\n * @example\n * YES\n * NO\n * \n *\n * @example\n * YES\n * NO\n * \n */\n@Pipe({\n  name: 'stringEndsWith'\n})\nexport class StringEndsWithPipe implements PipeTransform {\n  /**\n   *\n   * @param [value] The string to inspect\n   * @param [target] The string to search for\n   * @param [position] The position to search up to (optional)\n   *\n   * @returns Returns true if string ends with target, else false\n   */\n  transform(value: string, target: string, position?: number): boolean {\n    if (typeof value !== 'string') return false;\n    let pos = position === undefined ? length : +position;\n    pos = Math.min((pos = 0 && value.slice(pos, end) === target;\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/StringFormatUnicornPipe.html":{"url":"pipes/StringFormatUnicornPipe.html","title":"pipe - StringFormatUnicornPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  StringFormatUnicornPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/string-transform/string-format-unicorn.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Subbing in values to simple string templates.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            {{ 'Hello {name}. Welcome to {place}.' | stringFormatUnicorn: { name: 'Dima', place: 'New York City' } }}\n\n                        \n                        \n                            {{ 'Hello {0}. Welcome to {1}.' | stringFormatUnicorn: ['Dima', 'New York City'] }}\n\n                        \n                        \n                            {{ 'Hello {0}. Welcome to {1}.' | stringFormatUnicorn: 'Dima': 'New York City' }}\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        stringFormatUnicorn\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string, ...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/string-transform/string-format-unicorn.pipe.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to format\n\n                                    \n                                \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Shortcodes and values for replacing. Can be a list of values, an array of values, or object with key and value.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        The formated value\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Subbing in values to simple string templates.\n *\n * @example\n * {{ 'Hello {name}. Welcome to {place}.' | stringFormatUnicorn: { name: 'Dima', place: 'New York City' } }}\n * \n *\n * @example\n * {{ 'Hello {0}. Welcome to {1}.' | stringFormatUnicorn: ['Dima', 'New York City'] }}\n * \n *\n * @example\n * {{ 'Hello {0}. Welcome to {1}.' | stringFormatUnicorn: 'Dima': 'New York City' }}\n * \n */\n@Pipe({\n  name: 'stringFormatUnicorn'\n})\nexport class StringFormatUnicornPipe implements PipeTransform {\n  /**\n   * @param [value] The value to format\n   * @param [args] Shortcodes and values for replacing. Can be a list of values, an array of values, or object with key and value.\n   *\n   * @returns The formated value\n   */\n  transform(value: string, ...args): any {\n    if (value && args.length) {\n      const params = ['string', 'number'].includes(typeof args[0]) ? Array.prototype.slice.call(args) : args[0];\n      let result = value.toString();\n      for (const param in params) result = result.replace(new RegExp(`\\\\{${param}\\\\}`, 'gi'), params[param]);\n      return result;\n    }\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/StringIncludesPipe.html":{"url":"pipes/StringIncludesPipe.html","title":"pipe - StringIncludesPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  StringIncludesPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/string-check/string-includes.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Checks whether string includes a substring.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            YES\nNO\n\n                        \n                        \n                            YES\nNO\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        stringIncludes\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string, target: string, position?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/string-check/string-includes.pipe.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string to inspect\n\n                                    \n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string to search for\n\n                                    \n                                \n                                \n                                    position\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The position to search (optional)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Returns true if string includes a substring, else false\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Checks whether string includes a substring.\n *\n * @example\n * YES\n * NO\n * \n *\n * @example\n * YES\n * NO\n * \n */\n@Pipe({\n  name: 'stringIncludes'\n})\nexport class StringIncludesPipe implements PipeTransform {\n  /**\n   * @param [value] The string to inspect\n   * @param [target] The string to search for\n   * @param [position] The position to search (optional)\n   *\n   * @returns Returns true if string includes a substring, else false\n   */\n  transform(value: string, target: string, position?: number): boolean {\n    if (typeof value !== 'string') return false;\n    let pos = position === undefined ? length : +position;\n    pos = Math.min((pos \n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/StringNl2brPipe.html":{"url":"pipes/StringNl2brPipe.html","title":"pipe - StringNl2brPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  StringNl2brPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/string-transform/string-nl2br.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Inserts HTML line breaks before all newlines in a string and and sanitizing potentially dangerous values.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            {{ 'Hello /n world' | stringNl2Br }}\nworld -->\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        stringNl2Br\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string, sanitizeBeforehand?)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/string-transform/string-nl2br.pipe.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to process.\n\n                                    \n                                \n                                \n                                    sanitizeBeforehand\n                                    \n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Sanitizing potentially dangerous values (Default: true)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The processed value\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform, SecurityContext } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * Inserts HTML line breaks before all newlines in a string and and sanitizing potentially dangerous values.\n *\n * @example\n * {{ 'Hello /n world' | stringNl2Br }}\n * world -->\n */\n@Pipe({\n  name: 'stringNl2Br'\n})\nexport class StringNl2brPipe implements PipeTransform {\n  constructor(private sanitizer: DomSanitizer) {\n  }\n\n  /**\n   * @param [value] The value to process.\n   * @param [sanitizeBeforehand] Sanitizing potentially dangerous values (Default: true)\n   *\n   * @returns The processed value\n   */\n  transform(value: string, sanitizeBeforehand?): string {\n    if (sanitizeBeforehand === undefined) sanitizeBeforehand = true;\n    if (!value || typeof value !== 'string') return value;\n    let result: any;\n    const textParsed = value.replace(/(?:\\r\\n|\\r|\\n)/g, '');\n    if (sanitizeBeforehand) {\n      result = this.sanitizer.sanitize(SecurityContext.HTML, textParsed);\n    } else {\n      result = textParsed;\n    }\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/StringStartsWithPipe.html":{"url":"pipes/StringStartsWithPipe.html","title":"pipe - StringStartsWithPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  StringStartsWithPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/string-check/string-starts-with.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Checks if string starts with the given target string.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            YES\nNO\n\n\nYES\nNO\n\n\nYES\nNO\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        stringStartsWith\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string, target: string, position?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/string-check/string-starts-with.pipe.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string to inspect\n\n                                    \n                                \n                                \n                                    target\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The string to search for\n\n                                    \n                                \n                                \n                                    position\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The position to search from (optional)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        Returns true if string starts with target, else false\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Checks if string starts with the given target string.\n *\n * @example\n * YES\n * NO\n * \n *\n * YES\n * NO\n * \n *\n * YES\n * NO\n * \n */\n@Pipe({\n  name: 'stringStartsWith'\n})\nexport class StringStartsWithPipe implements PipeTransform {\n  /**\n   * @param [value] The string to inspect\n   * @param [target] The string to search for\n   * @param [position] The position to search from (optional)\n   *\n   * @returns Returns true if string starts with target, else false\n   */\n  transform(value: string, target: string, position?: number): boolean {\n    if (typeof value !== 'string') return false;\n    const pos = Math.min(position === null || position \n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StringTransformPipesModule.html":{"url":"modules/StringTransformPipesModule.html","title":"module - StringTransformPipesModule","body":"\n                   \n\n\n\n\n    Modules\n    StringTransformPipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StringTransformPipesModule\n\n\n\ncluster_StringTransformPipesModule_declarations\n\n\n\ncluster_StringTransformPipesModule_exports\n\n\n\n\nStringFormatUnicornPipe\n\nStringFormatUnicornPipe\n\n\n\nStringTransformPipesModule\n\nStringTransformPipesModule\n\nStringTransformPipesModule -->\n\nStringFormatUnicornPipe->StringTransformPipesModule\n\n\n\n\n\nStringNl2brPipe\n\nStringNl2brPipe\n\nStringTransformPipesModule -->\n\nStringNl2brPipe->StringTransformPipesModule\n\n\n\n\n\nStringTruncateByWordsPipe\n\nStringTruncateByWordsPipe\n\nStringTransformPipesModule -->\n\nStringTruncateByWordsPipe->StringTransformPipesModule\n\n\n\n\n\nStringTruncatePipe\n\nStringTruncatePipe\n\nStringTransformPipesModule -->\n\nStringTruncatePipe->StringTransformPipesModule\n\n\n\n\n\nStringUnescapePipe\n\nStringUnescapePipe\n\nStringTransformPipesModule -->\n\nStringUnescapePipe->StringTransformPipesModule\n\n\n\n\n\nStringFormatUnicornPipe \n\nStringFormatUnicornPipe \n\nStringFormatUnicornPipe  -->\n\nStringTransformPipesModule->StringFormatUnicornPipe \n\n\n\n\n\nStringNl2brPipe \n\nStringNl2brPipe \n\nStringNl2brPipe  -->\n\nStringTransformPipesModule->StringNl2brPipe \n\n\n\n\n\nStringTruncateByWordsPipe \n\nStringTruncateByWordsPipe \n\nStringTruncateByWordsPipe  -->\n\nStringTransformPipesModule->StringTruncateByWordsPipe \n\n\n\n\n\nStringTruncatePipe \n\nStringTruncatePipe \n\nStringTruncatePipe  -->\n\nStringTransformPipesModule->StringTruncatePipe \n\n\n\n\n\nStringUnescapePipe \n\nStringUnescapePipe \n\nStringUnescapePipe  -->\n\nStringTransformPipesModule->StringUnescapePipe \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/string-transform-pipes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            StringFormatUnicornPipe\n                        \n                        \n                            StringNl2brPipe\n                        \n                        \n                            StringTruncateByWordsPipe\n                        \n                        \n                            StringTruncatePipe\n                        \n                        \n                            StringUnescapePipe\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StringFormatUnicornPipe\n                        \n                        \n                            StringNl2brPipe\n                        \n                        \n                            StringTruncateByWordsPipe\n                        \n                        \n                            StringTruncatePipe\n                        \n                        \n                            StringUnescapePipe\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { StringUnescapePipe } from './string-transform/string-unescape.pipe';\nimport { StringTruncateByWordsPipe } from './string-transform/string-truncate-by-words.pipe';\nimport { StringTruncatePipe } from './string-transform/string-truncate.pipe';\nimport { StringFormatUnicornPipe } from './string-transform/string-format-unicorn.pipe';\nimport { StringNl2brPipe } from './string-transform/string-nl2br.pipe';\n\n@NgModule({\n  declarations: [\n    StringUnescapePipe,\n    StringTruncateByWordsPipe,\n    StringTruncatePipe,\n    StringFormatUnicornPipe,\n    StringNl2brPipe\n  ],\n  exports: [\n    StringUnescapePipe,\n    StringTruncateByWordsPipe,\n    StringTruncatePipe,\n    StringFormatUnicornPipe,\n    StringNl2brPipe\n  ]\n})\nexport class StringTransformPipesModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/StringTruncateByWordsPipe.html":{"url":"pipes/StringTruncateByWordsPipe.html","title":"pipe - StringTruncateByWordsPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  StringTruncateByWordsPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/string-transform/string-truncate-by-words.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Truncates string if it's longer than the given maximum string length and without cutting words.\nThe last space symbol of the truncated string are replaced with the omission string which defaults to \"...\".\n\n            \n\n            \n                Example\n            \n            \n                        \n                            {{ 'Hello world. Welcome to New York City' | stringTruncateByWords }}\n\n                        \n                        \n                            {{ 'Hello world. Welcome to New York City' | stringTruncateByWords:{ len: 10 } }}\n\n                        \n                        \n                            {{ 'Hello world. Welcome to New York City' | stringTruncateByWords:{ len: 10, omission: '***' } }}\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        stringTruncateByWords\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string, options?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/string-transform/string-truncate-by-words.pipe.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to truncate\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The truncated value\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Truncates string if it's longer than the given maximum string length and without cutting words.\n * The last space symbol of the truncated string are replaced with the omission string which defaults to \"...\".\n *\n * @example\n * {{ 'Hello world. Welcome to New York City' | stringTruncateByWords }}\n * \n *\n * @example\n * {{ 'Hello world. Welcome to New York City' | stringTruncateByWords:{ len: 10 } }}\n * \n *\n * @example\n * {{ 'Hello world. Welcome to New York City' | stringTruncateByWords:{ len: 10, omission: '***' } }}\n * \n */\n@Pipe({\n  name: 'stringTruncateByWords'\n})\nexport class StringTruncateByWordsPipe implements PipeTransform {\n  /**\n   * @param [value] The value to truncate\n   * @param [options] Options\n   *\n   * @returns The truncated value\n   */\n  transform(value: string, options?: { len?: number, omission?: string }): string {\n    const o = {\n      len: 30,\n      omission: '..',\n      ... (options || {})\n    };\n    if (value.length \n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/StringTruncatePipe.html":{"url":"pipes/StringTruncatePipe.html","title":"pipe - StringTruncatePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  StringTruncatePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/string-transform/string-truncate.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Truncates string if it's longer than the given maximum string length. The last characters of\nthe truncated string are replaced with the omission string which defaults to \"...\".\n\n            \n\n            \n                Example\n            \n            \n                        \n                            {{ 'Hello world. Welcome to New York City' | stringTruncate }}\n\n                        \n                        \n                            {{ 'Hello world. Welcome to New York City' | stringTruncate:{ len: 10 } }}\n\n                        \n                        \n                            {{ 'Hello world. Welcome to New York City' | stringTruncate:{ len: 10, omission: '***' } }}\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        stringTruncate\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string, options?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/string-transform/string-truncate.pipe.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to truncate\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        The truncated value\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Truncates string if it's longer than the given maximum string length. The last characters of\n * the truncated string are replaced with the omission string which defaults to \"...\".\n *\n * @example\n * {{ 'Hello world. Welcome to New York City' | stringTruncate }}\n * \n *\n * @example\n * {{ 'Hello world. Welcome to New York City' | stringTruncate:{ len: 10 } }}\n * \n *\n * @example\n * {{ 'Hello world. Welcome to New York City' | stringTruncate:{ len: 10, omission: '***' } }}\n * \n */\n@Pipe({\n  name: 'stringTruncate'\n})\nexport class StringTruncatePipe implements PipeTransform {\n  /**\n   * @param [value] The value to truncate\n   * @param [options] Options\n   *\n   * @returns The truncated value\n   */\n  transform(value: string, options?: { len?: number, omission?: string }): string {\n    const o = {\n      len: 30,\n      omission: '..',\n      ... (options || {})\n    };\n    if (value.length \n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/StringUnescapePipe.html":{"url":"pipes/StringUnescapePipe.html","title":"pipe - StringUnescapePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  StringUnescapePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/string-transform/string-unescape.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Convert HTML entities to characters.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            {{ 'Albert Einstein said: &#039;E=MC&sup2;&#039;' | stringUnescape }}\n\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        stringUnescape\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/string-transform/string-unescape.pipe.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to convert\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Converted the value\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Convert HTML entities to characters.\n *\n * @example\n * {{ 'Albert Einstein said: &#039;E=MC&sup2;&#039;' | stringUnescape }}\n * \n */\n@Pipe({\n  name: 'stringUnescape'\n})\nexport class StringUnescapePipe implements PipeTransform {\n  /**\n   * @param [value] The value to convert\n   *\n   * @returns Converted the value\n   */\n  transform(value: string): string {\n    return new DOMParser().parseFromString(value, 'text/html')?.documentElement?.textContent;\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/TimestampPipe.html":{"url":"pipes/TimestampPipe.html","title":"pipe - TimestampPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  TimestampPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/datetime/timestamp.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Convert date to timestamp. Date can be in the following formats: string, Moment, Date\n\n            \n\n            \n                Example\n            \n            \n                        \n                            \n{{ date | timestamp }} \n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        timestamp\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string | Moment | Date)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/pipes/datetime/timestamp.pipe.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | Moment | Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The value to convert\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        Returns Unix Timestamp (milliseconds)\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport { isMoment, Moment } from 'moment';\nimport * as moment from 'moment';\n\n/**\n * Convert date to timestamp. Date can be in the following formats: string, Moment, Date\n *\n * @example\n * \n * {{ date | timestamp }} \n */\n@Pipe({\n  name: 'timestamp'\n})\nexport class TimestampPipe implements PipeTransform {\n  /**\n   * @param [value] The value to convert\n   *\n   * @returns Returns Unix Timestamp (milliseconds)\n   */\n  transform(value: string | Moment | Date): number {\n    return !isMoment(value) ? moment(value).valueOf() : value.valueOf();\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UnitsPipesModule.html":{"url":"modules/UnitsPipesModule.html","title":"module - UnitsPipesModule","body":"\n                   \n\n\n\n\n    Modules\n    UnitsPipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UnitsPipesModule\n\n\n\ncluster_UnitsPipesModule_declarations\n\n\n\ncluster_UnitsPipesModule_exports\n\n\n\n\nBytesToMegabytesPipe\n\nBytesToMegabytesPipe\n\n\n\nUnitsPipesModule\n\nUnitsPipesModule\n\nUnitsPipesModule -->\n\nBytesToMegabytesPipe->UnitsPipesModule\n\n\n\n\n\nBytesToMegabytesPipe \n\nBytesToMegabytesPipe \n\nBytesToMegabytesPipe  -->\n\nUnitsPipesModule->BytesToMegabytesPipe \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/units-pipes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            BytesToMegabytesPipe\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            BytesToMegabytesPipe\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BytesToMegabytesPipe } from './units/bytesToMegabytes.pipe';\n\n@NgModule({\n  declarations: [\n    BytesToMegabytesPipe\n  ],\n  exports: [\n    BytesToMegabytesPipe\n  ]\n})\nexport class UnitsPipesModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UtilsPipesModule.html":{"url":"modules/UtilsPipesModule.html","title":"module - UtilsPipesModule","body":"\n                   \n\n\n\n\n    Modules\n    UtilsPipesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UtilsPipesModule\n\n\n\ncluster_UtilsPipesModule_declarations\n\n\n\ncluster_UtilsPipesModule_exports\n\n\n\n\nDefaultValuePipe\n\nDefaultValuePipe\n\n\n\nUtilsPipesModule\n\nUtilsPipesModule\n\nUtilsPipesModule -->\n\nDefaultValuePipe->UtilsPipesModule\n\n\n\n\n\nIsEmptyPipe\n\nIsEmptyPipe\n\nUtilsPipesModule -->\n\nIsEmptyPipe->UtilsPipesModule\n\n\n\n\n\nIsNotEmptyPipe\n\nIsNotEmptyPipe\n\nUtilsPipesModule -->\n\nIsNotEmptyPipe->UtilsPipesModule\n\n\n\n\n\nIsNotNullPipe\n\nIsNotNullPipe\n\nUtilsPipesModule -->\n\nIsNotNullPipe->UtilsPipesModule\n\n\n\n\n\nIsNotUndefinedPipe\n\nIsNotUndefinedPipe\n\nUtilsPipesModule -->\n\nIsNotUndefinedPipe->UtilsPipesModule\n\n\n\n\n\nIsNullPipe\n\nIsNullPipe\n\nUtilsPipesModule -->\n\nIsNullPipe->UtilsPipesModule\n\n\n\n\n\nIsUndefinedPipe\n\nIsUndefinedPipe\n\nUtilsPipesModule -->\n\nIsUndefinedPipe->UtilsPipesModule\n\n\n\n\n\nProgressPipe\n\nProgressPipe\n\nUtilsPipesModule -->\n\nProgressPipe->UtilsPipesModule\n\n\n\n\n\nSafeHtmlPipe\n\nSafeHtmlPipe\n\nUtilsPipesModule -->\n\nSafeHtmlPipe->UtilsPipesModule\n\n\n\n\n\nDefaultValuePipe \n\nDefaultValuePipe \n\nDefaultValuePipe  -->\n\nUtilsPipesModule->DefaultValuePipe \n\n\n\n\n\nIsEmptyPipe \n\nIsEmptyPipe \n\nIsEmptyPipe  -->\n\nUtilsPipesModule->IsEmptyPipe \n\n\n\n\n\nIsNotEmptyPipe \n\nIsNotEmptyPipe \n\nIsNotEmptyPipe  -->\n\nUtilsPipesModule->IsNotEmptyPipe \n\n\n\n\n\nIsNotNullPipe \n\nIsNotNullPipe \n\nIsNotNullPipe  -->\n\nUtilsPipesModule->IsNotNullPipe \n\n\n\n\n\nIsNotUndefinedPipe \n\nIsNotUndefinedPipe \n\nIsNotUndefinedPipe  -->\n\nUtilsPipesModule->IsNotUndefinedPipe \n\n\n\n\n\nIsNullPipe \n\nIsNullPipe \n\nIsNullPipe  -->\n\nUtilsPipesModule->IsNullPipe \n\n\n\n\n\nIsUndefinedPipe \n\nIsUndefinedPipe \n\nIsUndefinedPipe  -->\n\nUtilsPipesModule->IsUndefinedPipe \n\n\n\n\n\nProgressPipe \n\nProgressPipe \n\nProgressPipe  -->\n\nUtilsPipesModule->ProgressPipe \n\n\n\n\n\nSafeHtmlPipe \n\nSafeHtmlPipe \n\nSafeHtmlPipe  -->\n\nUtilsPipesModule->SafeHtmlPipe \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/pipes/utils-pipes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            DefaultValuePipe\n                        \n                        \n                            IsEmptyPipe\n                        \n                        \n                            IsNotEmptyPipe\n                        \n                        \n                            IsNotNullPipe\n                        \n                        \n                            IsNotUndefinedPipe\n                        \n                        \n                            IsNullPipe\n                        \n                        \n                            IsUndefinedPipe\n                        \n                        \n                            ProgressPipe\n                        \n                        \n                            SafeHtmlPipe\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DefaultValuePipe\n                        \n                        \n                            IsEmptyPipe\n                        \n                        \n                            IsNotEmptyPipe\n                        \n                        \n                            IsNotNullPipe\n                        \n                        \n                            IsNotUndefinedPipe\n                        \n                        \n                            IsNullPipe\n                        \n                        \n                            IsUndefinedPipe\n                        \n                        \n                            ProgressPipe\n                        \n                        \n                            SafeHtmlPipe\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { DefaultValuePipe } from './utils/default-value.pipe';\nimport { IsEmptyPipe } from './utils/is-empty.pipe';\nimport { IsNotEmptyPipe } from './utils/is-not-empty.pipe';\nimport { ProgressPipe } from './utils/progress.pipe';\nimport { SafeHtmlPipe } from './utils/safe-html.pipe';\nimport { IsNullPipe } from './utils/is-null.pipe';\nimport { IsNotNullPipe } from './utils/is-not-null.pipe';\nimport { IsUndefinedPipe } from './utils/is-undefined.pipe';\nimport { IsNotUndefinedPipe } from './utils/is-not-undefined.pipe';\n\n@NgModule({\n  declarations: [\n    DefaultValuePipe,\n    IsEmptyPipe,\n    IsNotEmptyPipe,\n    ProgressPipe,\n    SafeHtmlPipe,\n    IsNullPipe,\n    IsNotNullPipe,\n    IsUndefinedPipe,\n    IsNotUndefinedPipe\n  ],\n  exports: [\n    DefaultValuePipe,\n    IsEmptyPipe,\n    IsNotEmptyPipe,\n    ProgressPipe,\n    SafeHtmlPipe,\n    IsNullPipe,\n    IsNotNullPipe,\n    IsUndefinedPipe,\n    IsNotUndefinedPipe\n  ]\n})\nexport class UtilsPipesModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/helpers/elapsed-time.ts\n            \n            interface\n            ElapsedTimeOptions\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/lib/helpers/is-empty.ts\n            \n            interface\n            IsEmptyOptions\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/lib/helpers/progress.ts\n            \n            interface\n            ProgressOptions\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/lib/pipes/array-transform/array-join.pipe.ts\n            \n            pipe\n            ArrayJoinPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/datetime/elapsed-time.pipe.ts\n            \n            pipe\n            ElapsedTimePipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/datetime/timestamp.pipe.ts\n            \n            pipe\n            TimestampPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/string-check/string-ends-with.pipe.ts\n            \n            pipe\n            StringEndsWithPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/string-check/string-includes.pipe.ts\n            \n            pipe\n            StringIncludesPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/string-check/string-starts-with.pipe.ts\n            \n            pipe\n            StringStartsWithPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/string-transform/string-format-unicorn.pipe.ts\n            \n            pipe\n            StringFormatUnicornPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/string-transform/string-nl2br.pipe.ts\n            \n            pipe\n            StringNl2brPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/string-transform/string-truncate-by-words.pipe.ts\n            \n            pipe\n            StringTruncateByWordsPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/string-transform/string-truncate.pipe.ts\n            \n            pipe\n            StringTruncatePipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/string-transform/string-unescape.pipe.ts\n            \n            pipe\n            StringUnescapePipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/units/bytesToMegabytes.pipe.ts\n            \n            pipe\n            BytesToMegabytesPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/utils/default-value.pipe.ts\n            \n            pipe\n            DefaultValuePipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/utils/is-empty.pipe.ts\n            \n            pipe\n            IsEmptyPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/utils/is-not-empty.pipe.ts\n            \n            pipe\n            IsNotEmptyPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/utils/is-not-null.pipe.ts\n            \n            pipe\n            IsNotNullPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/utils/is-not-undefined.pipe.ts\n            \n            pipe\n            IsNotUndefinedPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/utils/is-null.pipe.ts\n            \n            pipe\n            IsNullPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/utils/is-undefined.pipe.ts\n            \n            pipe\n            IsUndefinedPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/utils/progress.pipe.ts\n            \n            pipe\n            ProgressPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/lib/pipes/utils/safe-html.pipe.ts\n            \n            pipe\n            SafeHtmlPipe\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^1.10.0\n        \n            moment : ^2.27.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^9.1.12\n        \n            @angular/core : ^9.1.12\n        \n            moment : ^2.27.0\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgxPipes\nThis library was generated with Angular CLI version 9.1.12.\nCode scaffolding\nRun ng generate component component-name --project ngx-pipes to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module --project ngx-pipes.\n\nNote: Don't forget to add --project ngx-pipes or else it will be added to the default project in your angular.json file. \n\nBuild\nRun ng build ngx-pipes to build the project. The build artifacts will be stored in the dist/ directory.\nPublishing\nAfter building your library with ng build ngx-pipes, go to the dist folder cd dist/ngx-pipes and run npm publish.\nRunning unit tests\nRun ng test ngx-pipes to execute the unit tests via Karma.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        ArrayTransformPipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatetimePipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PipesModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StringCheckPipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StringTransformPipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UnitsPipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UtilsPipesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ArrayTransformPipesModule\n\n\n\ncluster_ArrayTransformPipesModule_declarations\n\n\n\ncluster_ArrayTransformPipesModule_exports\n\n\n\ncluster_DatetimePipesModule\n\n\n\ncluster_DatetimePipesModule_declarations\n\n\n\ncluster_DatetimePipesModule_exports\n\n\n\ncluster_StringCheckPipesModule\n\n\n\ncluster_StringCheckPipesModule_declarations\n\n\n\ncluster_StringCheckPipesModule_exports\n\n\n\ncluster_StringTransformPipesModule\n\n\n\ncluster_StringTransformPipesModule_declarations\n\n\n\ncluster_StringTransformPipesModule_exports\n\n\n\ncluster_UnitsPipesModule\n\n\n\ncluster_UnitsPipesModule_declarations\n\n\n\ncluster_UnitsPipesModule_exports\n\n\n\ncluster_UtilsPipesModule\n\n\n\ncluster_UtilsPipesModule_declarations\n\n\n\ncluster_UtilsPipesModule_exports\n\n\n\n\nArrayJoinPipe\n\nArrayJoinPipe\n\n\n\nArrayTransformPipesModule\n\nArrayTransformPipesModule\n\nArrayTransformPipesModule -->\n\nArrayJoinPipe->ArrayTransformPipesModule\n\n\n\n\n\nArrayJoinPipe \n\nArrayJoinPipe \n\nArrayJoinPipe  -->\n\nArrayTransformPipesModule->ArrayJoinPipe \n\n\n\n\n\nElapsedTimePipe\n\nElapsedTimePipe\n\n\n\nDatetimePipesModule\n\nDatetimePipesModule\n\nDatetimePipesModule -->\n\nElapsedTimePipe->DatetimePipesModule\n\n\n\n\n\nTimestampPipe\n\nTimestampPipe\n\nDatetimePipesModule -->\n\nTimestampPipe->DatetimePipesModule\n\n\n\n\n\nElapsedTimePipe \n\nElapsedTimePipe \n\nElapsedTimePipe  -->\n\nDatetimePipesModule->ElapsedTimePipe \n\n\n\n\n\nTimestampPipe \n\nTimestampPipe \n\nTimestampPipe  -->\n\nDatetimePipesModule->TimestampPipe \n\n\n\n\n\nStringEndsWithPipe\n\nStringEndsWithPipe\n\n\n\nStringCheckPipesModule\n\nStringCheckPipesModule\n\nStringCheckPipesModule -->\n\nStringEndsWithPipe->StringCheckPipesModule\n\n\n\n\n\nStringIncludesPipe\n\nStringIncludesPipe\n\nStringCheckPipesModule -->\n\nStringIncludesPipe->StringCheckPipesModule\n\n\n\n\n\nStringStartsWithPipe\n\nStringStartsWithPipe\n\nStringCheckPipesModule -->\n\nStringStartsWithPipe->StringCheckPipesModule\n\n\n\n\n\nStringEndsWithPipe \n\nStringEndsWithPipe \n\nStringEndsWithPipe  -->\n\nStringCheckPipesModule->StringEndsWithPipe \n\n\n\n\n\nStringIncludesPipe \n\nStringIncludesPipe \n\nStringIncludesPipe  -->\n\nStringCheckPipesModule->StringIncludesPipe \n\n\n\n\n\nStringStartsWithPipe \n\nStringStartsWithPipe \n\nStringStartsWithPipe  -->\n\nStringCheckPipesModule->StringStartsWithPipe \n\n\n\n\n\nStringFormatUnicornPipe\n\nStringFormatUnicornPipe\n\n\n\nStringTransformPipesModule\n\nStringTransformPipesModule\n\nStringTransformPipesModule -->\n\nStringFormatUnicornPipe->StringTransformPipesModule\n\n\n\n\n\nStringNl2brPipe\n\nStringNl2brPipe\n\nStringTransformPipesModule -->\n\nStringNl2brPipe->StringTransformPipesModule\n\n\n\n\n\nStringTruncateByWordsPipe\n\nStringTruncateByWordsPipe\n\nStringTransformPipesModule -->\n\nStringTruncateByWordsPipe->StringTransformPipesModule\n\n\n\n\n\nStringTruncatePipe\n\nStringTruncatePipe\n\nStringTransformPipesModule -->\n\nStringTruncatePipe->StringTransformPipesModule\n\n\n\n\n\nStringUnescapePipe\n\nStringUnescapePipe\n\nStringTransformPipesModule -->\n\nStringUnescapePipe->StringTransformPipesModule\n\n\n\n\n\nStringFormatUnicornPipe \n\nStringFormatUnicornPipe \n\nStringFormatUnicornPipe  -->\n\nStringTransformPipesModule->StringFormatUnicornPipe \n\n\n\n\n\nStringNl2brPipe \n\nStringNl2brPipe \n\nStringNl2brPipe  -->\n\nStringTransformPipesModule->StringNl2brPipe \n\n\n\n\n\nStringTruncateByWordsPipe \n\nStringTruncateByWordsPipe \n\nStringTruncateByWordsPipe  -->\n\nStringTransformPipesModule->StringTruncateByWordsPipe \n\n\n\n\n\nStringTruncatePipe \n\nStringTruncatePipe \n\nStringTruncatePipe  -->\n\nStringTransformPipesModule->StringTruncatePipe \n\n\n\n\n\nStringUnescapePipe \n\nStringUnescapePipe \n\nStringUnescapePipe  -->\n\nStringTransformPipesModule->StringUnescapePipe \n\n\n\n\n\nBytesToMegabytesPipe\n\nBytesToMegabytesPipe\n\n\n\nUnitsPipesModule\n\nUnitsPipesModule\n\nUnitsPipesModule -->\n\nBytesToMegabytesPipe->UnitsPipesModule\n\n\n\n\n\nBytesToMegabytesPipe \n\nBytesToMegabytesPipe \n\nBytesToMegabytesPipe  -->\n\nUnitsPipesModule->BytesToMegabytesPipe \n\n\n\n\n\nDefaultValuePipe\n\nDefaultValuePipe\n\n\n\nUtilsPipesModule\n\nUtilsPipesModule\n\nUtilsPipesModule -->\n\nDefaultValuePipe->UtilsPipesModule\n\n\n\n\n\nIsEmptyPipe\n\nIsEmptyPipe\n\nUtilsPipesModule -->\n\nIsEmptyPipe->UtilsPipesModule\n\n\n\n\n\nIsNotEmptyPipe\n\nIsNotEmptyPipe\n\nUtilsPipesModule -->\n\nIsNotEmptyPipe->UtilsPipesModule\n\n\n\n\n\nIsNotNullPipe\n\nIsNotNullPipe\n\nUtilsPipesModule -->\n\nIsNotNullPipe->UtilsPipesModule\n\n\n\n\n\nIsNotUndefinedPipe\n\nIsNotUndefinedPipe\n\nUtilsPipesModule -->\n\nIsNotUndefinedPipe->UtilsPipesModule\n\n\n\n\n\nIsNullPipe\n\nIsNullPipe\n\nUtilsPipesModule -->\n\nIsNullPipe->UtilsPipesModule\n\n\n\n\n\nIsUndefinedPipe\n\nIsUndefinedPipe\n\nUtilsPipesModule -->\n\nIsUndefinedPipe->UtilsPipesModule\n\n\n\n\n\nProgressPipe\n\nProgressPipe\n\nUtilsPipesModule -->\n\nProgressPipe->UtilsPipesModule\n\n\n\n\n\nSafeHtmlPipe\n\nSafeHtmlPipe\n\nUtilsPipesModule -->\n\nSafeHtmlPipe->UtilsPipesModule\n\n\n\n\n\nDefaultValuePipe \n\nDefaultValuePipe \n\nDefaultValuePipe  -->\n\nUtilsPipesModule->DefaultValuePipe \n\n\n\n\n\nIsEmptyPipe \n\nIsEmptyPipe \n\nIsEmptyPipe  -->\n\nUtilsPipesModule->IsEmptyPipe \n\n\n\n\n\nIsNotEmptyPipe \n\nIsNotEmptyPipe \n\nIsNotEmptyPipe  -->\n\nUtilsPipesModule->IsNotEmptyPipe \n\n\n\n\n\nIsNotNullPipe \n\nIsNotNullPipe \n\nIsNotNullPipe  -->\n\nUtilsPipesModule->IsNotNullPipe \n\n\n\n\n\nIsNotUndefinedPipe \n\nIsNotUndefinedPipe \n\nIsNotUndefinedPipe  -->\n\nUtilsPipesModule->IsNotUndefinedPipe \n\n\n\n\n\nIsNullPipe \n\nIsNullPipe \n\nIsNullPipe  -->\n\nUtilsPipesModule->IsNullPipe \n\n\n\n\n\nIsUndefinedPipe \n\nIsUndefinedPipe \n\nIsUndefinedPipe  -->\n\nUtilsPipesModule->IsUndefinedPipe \n\n\n\n\n\nProgressPipe \n\nProgressPipe \n\nProgressPipe  -->\n\nUtilsPipesModule->ProgressPipe \n\n\n\n\n\nSafeHtmlPipe \n\nSafeHtmlPipe \n\nSafeHtmlPipe  -->\n\nUtilsPipesModule->SafeHtmlPipe \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    21 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ElapsedTimeArgument   (src/.../elapsed-time.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/helpers/elapsed-time.ts\n    \n    \n        \n            \n                \n                    \n                    ElapsedTimeArgument\n                \n            \n            \n                \n                        string | number | Moment | Date\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
